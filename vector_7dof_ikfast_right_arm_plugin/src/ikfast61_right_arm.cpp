/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-09-03 14:20:52.691096
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((1.0)*x4);
x13=((0.10375)*x6);
x14=((1.0)*x5);
x15=((1.0)*x7);
x16=((1.0)*x10);
x17=((0.10375)*x5);
x18=((1.0)*x0);
x19=((1.0)*x11);
x20=(x1*x3);
x21=(x2*x4);
x22=(x11*x2);
x23=(x6*x7);
x24=(x0*x6);
x25=(x3*x4);
x26=(x1*x7);
x27=(x0*x3);
x28=(x2*x6);
x29=(x18*x2);
x30=(x0*x1*x2);
x31=(x1*x29);
x32=(x14*x3*x6);
x33=(((x1*x5))+((x23*x3)));
x34=((((-1.0)*x12*x3))+x31);
x35=((((-1.0)*x1*x15))+x32);
x36=((((-1.0)*x12*x20))+x29);
x37=((((-1.0)*x12*x2))+(((-1.0)*x18*x20)));
x38=(((x18*x3))+((x1*x12*x2)));
x39=(x36*x5);
x40=(x10*x34);
x41=(((x14*x24))+((x15*(((((-1.0)*x0*x20))+(((-1.0)*x21)))))));
x42=(((x15*((x29+(((-1.0)*x20*x4))))))+((x12*x5*x6)));
x43=((((-1.0)*x14*x36))+((x12*x23)));
x44=((((-1.0)*x14*x37))+((x15*x24)));
x45=(x11*x44);
eerot[0]=(((x8*(((((-1.0)*x16*x34))+(((-1.0)*x19*x44))))))+((x41*x9)));
eerot[1]=(((x41*x8))+((x9*((x45+x40)))));
eerot[2]=(((x11*(((((-1.0)*x31))+x25))))+((x10*x44)));
eetrans[0]=(((x11*(((((-0.10375)*x25))+(((0.10375)*x30))))))+(((0.31105)*x25))+(((-0.0114)*x24))+(((-0.41)*x4))+((x10*((((x17*x37))+(((-1.0)*x0*x13*x7))))))+(((-0.31105)*x30)));
eerot[3]=(((x8*((((x11*x35))+((x10*x28))))))+((x33*x9)));
eerot[4]=(((x33*x8))+((x9*(((((-1.0)*x16*x28))+(((-1.0)*x19*x35)))))));
eerot[5]=(((x22*x6))+((x10*(((((-1.0)*x32))+x26)))));
eetrans[1]=((0.0016)+(((0.31105)*x28))+(((-0.0114)*x1))+(((-1.0)*x13*x22))+((x10*(((((-0.10375)*x26))+((x13*x3*x5)))))));
eerot[6]=(((x42*x9))+((x8*(((((-1.0)*x16*x38))+(((-1.0)*x19*x43)))))));
eerot[7]=(((x9*((((x10*x38))+((x11*x43))))))+((x42*x8)));
eerot[8]=(((x10*x43))+(((-1.0)*x11*x38)));
IkReal x46=(x1*x21);
eetrans[2]=((-0.11875)+(((-0.31105)*x46))+(((0.41)*x0))+((x10*((((x17*x36))+(((-1.0)*x13*x4*x7))))))+(((-0.0114)*x4*x6))+((x11*(((((0.10375)*x27))+(((0.10375)*x46))))))+(((-0.31105)*x27)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((((0.10375)*r02))+px);
new_r10=((-1.0)*r20);
new_r11=((-1.0)*r21);
new_r12=r22;
new_py=((0.11875)+(((0.10375)*r22))+pz);
new_r20=r10;
new_r21=r11;
new_r22=((-1.0)*r12);
new_pz=((0.0016)+(((-1.0)*py))+(((-0.10375)*r12)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=((1.03889682272084)+(((-3.92063075107523)*pp)));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j11eval[1];
j11eval[0]=((1.0)+(((744.4760118498)*(sj12*sj12))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
j10eval[0]=((px*px)+(py*py));
j10eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
j10eval[0]=((px*px)+(py*py));
j10eval[1]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j10, j11]

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(((0.82)*py)),IkReal(((-0.82)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
IkReal x50=((1.0)*(x52.value));
if((((((0.6724)*(px*px)))+(((0.6724)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x53=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.6724)*(px*px)))+(((0.6724)*(py*py)))))),-1);
if(!x53.valid){
continue;
}
if( (((-1.0)*(x53.value)*(((-0.0712179375)+(((-1.0)*pp)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x53.value)*(((-0.0712179375)+(((-1.0)*pp)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x51=((-1.0)*(IKasin(((-1.0)*(x53.value)*(((-0.0712179375)+(((-1.0)*pp))))))));
j10array[0]=((((-1.0)*x51))+(((-1.0)*x50)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((1.0)*x51))+(((-1.0)*x50)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((0.41)+(((-1.0)*py*(IKcos(j10))))+(((-0.31105)*cj12))+((px*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
IkReal x54=cj12*cj12;
IkReal x55=((124420000.0)*sj12);
IkReal x56=(py*sj10);
IkReal x57=(cj10*px);
j11eval[0]=((-1.00134322662394)+x54);
j11eval[1]=((IKabs(((((-4560000.0)*pz))+((x55*x56))+((x55*x57)))))+(IKabs(((((4560000.0)*x56))+(((4560000.0)*x57))+((pz*x55))))));
j11eval[2]=IKsign(((-38752825.0)+(((38700841.0)*x54))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
j11eval[0]=((((-1.0)*cj10*px))+(((-1.0)*py*sj10))+(((27.2850877192982)*pz*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x58=((27.2850877192982)*sj12);
j11eval[0]=((((-1.0)*cj10*px*x58))+(((-1.0)*py*sj10*x58))+(((-1.0)*pz)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x59=((100000000.0)*pz);
IkReal x60=(py*sj10*sj12);
IkReal x61=(cj10*px*sj12);
CheckValue<IkReal> x62=IKPowWithIntegerCheck(((((-1140000.0)*pz))+(((-31105000.0)*x60))+(((-31105000.0)*x61))),-1);
if(!x62.valid){
continue;
}
CheckValue<IkReal> x63=IKPowWithIntegerCheck(((((124420000.0)*x61))+(((124420000.0)*x60))+(((4560000.0)*pz))),-1);
if(!x63.valid){
continue;
}
if( IKabs(((x62.value)*((((py*sj10*x59))+((cj10*px*x59))+(((354597.0)*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x63.value)*(((-38700841.0)+(((38700841.0)*(cj12*cj12)))+(((400000000.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x62.value)*((((py*sj10*x59))+((cj10*px*x59))+(((354597.0)*sj12))))))+IKsqr(((x63.value)*(((-38700841.0)+(((38700841.0)*(cj12*cj12)))+(((400000000.0)*(pz*pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x62.value)*((((py*sj10*x59))+((cj10*px*x59))+(((354597.0)*sj12))))), ((x63.value)*(((-38700841.0)+(((38700841.0)*(cj12*cj12)))+(((400000000.0)*(pz*pz)))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x64=IKsin(j11);
IkReal x65=IKcos(j11);
IkReal x66=(py*sj10);
IkReal x67=((0.31105)*sj12);
IkReal x68=(cj10*px);
IkReal x69=((1.0)*x64);
evalcond[0]=(pz+((x64*x67))+(((-0.0114)*x65)));
evalcond[1]=(x66+x68+(((0.0114)*x64))+((x65*x67)));
evalcond[2]=((-0.0114)+(((-1.0)*x66*x69))+(((-1.0)*x68*x69))+((pz*x65)));
evalcond[3]=(x67+((pz*x64))+((x65*x68))+((x65*x66)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x950=(cj10*px);
IkReal x951=(pz*sj12);
IkReal x952=(py*sj10);
IkReal x953=((100000000.0)*pz);
CheckValue<IkReal> x954=IKPowWithIntegerCheck(((((-285000.0)*x950))+(((-285000.0)*x952))+(((7776250.0)*x951))),-1);
if(!x954.valid){
continue;
}
CheckValue<IkReal> x955=IKPowWithIntegerCheck(((((-1140000.0)*x950))+(((-1140000.0)*x952))+(((31105000.0)*x951))),-1);
if(!x955.valid){
continue;
}
if( IKabs(((x954.value)*(((3249.0)+(((-25000000.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x955.value)*(((((354597.0)*sj12))+(((-1.0)*x950*x953))+(((-1.0)*x952*x953)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x954.value)*(((3249.0)+(((-25000000.0)*(pz*pz)))))))+IKsqr(((x955.value)*(((((354597.0)*sj12))+(((-1.0)*x950*x953))+(((-1.0)*x952*x953))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x954.value)*(((3249.0)+(((-25000000.0)*(pz*pz)))))), ((x955.value)*(((((354597.0)*sj12))+(((-1.0)*x950*x953))+(((-1.0)*x952*x953))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x956=IKsin(j11);
IkReal x957=IKcos(j11);
IkReal x958=(py*sj10);
IkReal x959=((0.31105)*sj12);
IkReal x960=(cj10*px);
IkReal x961=((1.0)*x956);
evalcond[0]=((((-0.0114)*x957))+((x956*x959))+pz);
evalcond[1]=((((0.0114)*x956))+((x957*x959))+x960+x958);
evalcond[2]=((-0.0114)+(((-1.0)*x960*x961))+(((-1.0)*x958*x961))+((pz*x957)));
evalcond[3]=(((pz*x956))+((x957*x960))+((x957*x958))+x959);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x962=((124420000.0)*sj12);
IkReal x963=(py*sj10);
IkReal x964=(cj10*px);
CheckValue<IkReal> x965=IKPowWithIntegerCheck(IKsign(((-38752825.0)+(((38700841.0)*(cj12*cj12))))),-1);
if(!x965.valid){
continue;
}
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal((((pz*x962))+(((4560000.0)*x964))+(((4560000.0)*x963)))),IkReal((((x962*x963))+((x962*x964))+(((-4560000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x965.value)))+(x966.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x967=IKsin(j11);
IkReal x968=IKcos(j11);
IkReal x969=(py*sj10);
IkReal x970=((0.31105)*sj12);
IkReal x971=(cj10*px);
IkReal x972=((1.0)*x967);
evalcond[0]=((((-0.0114)*x968))+pz+((x967*x970)));
evalcond[1]=(((x968*x970))+(((0.0114)*x967))+x971+x969);
evalcond[2]=((-0.0114)+(((-1.0)*x969*x972))+(((-1.0)*x971*x972))+((pz*x968)));
evalcond[3]=(((x968*x971))+((pz*x967))+((x968*x969))+x970);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
IkReal x973=((1.0)*(x975.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x976=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x976.valid){
continue;
}
if( (((x976.value)*(((0.41)+(((-0.31105)*cj12)))))) < -1-IKFAST_SINCOS_THRESH || (((x976.value)*(((0.41)+(((-0.31105)*cj12)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x974=IKasin(((x976.value)*(((0.41)+(((-0.31105)*cj12))))));
j10array[0]=((((-1.0)*x974))+(((-1.0)*x973)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+x974+(((-1.0)*x973)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((-0.0712179375)+(((-0.82)*px*(IKsin(j10))))+(((-1.0)*pp))+(((0.82)*py*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
IkReal x977=cj12*cj12;
IkReal x978=((124420000.0)*sj12);
IkReal x979=(py*sj10);
IkReal x980=(cj10*px);
j11eval[0]=((-1.00134322662394)+x977);
j11eval[1]=((IKabs(((((4560000.0)*x980))+(((4560000.0)*x979))+((pz*x978)))))+(IKabs((((x978*x979))+(((-4560000.0)*pz))+((x978*x980))))));
j11eval[2]=IKsign(((-38752825.0)+(((38700841.0)*x977))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
j11eval[0]=((((-1.0)*cj10*px))+(((-1.0)*py*sj10))+(((27.2850877192982)*pz*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x981=((27.2850877192982)*sj12);
j11eval[0]=((((-1.0)*cj10*px*x981))+(((-1.0)*py*sj10*x981))+(((-1.0)*pz)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x982=((100000000.0)*pz);
IkReal x983=(py*sj10*sj12);
IkReal x984=(cj10*px*sj12);
CheckValue<IkReal> x985=IKPowWithIntegerCheck(((((-1140000.0)*pz))+(((-31105000.0)*x984))+(((-31105000.0)*x983))),-1);
if(!x985.valid){
continue;
}
CheckValue<IkReal> x986=IKPowWithIntegerCheck(((((124420000.0)*x984))+(((124420000.0)*x983))+(((4560000.0)*pz))),-1);
if(!x986.valid){
continue;
}
if( IKabs(((x985.value)*((((py*sj10*x982))+((cj10*px*x982))+(((354597.0)*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x986.value)*(((-38700841.0)+(((38700841.0)*(cj12*cj12)))+(((400000000.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x985.value)*((((py*sj10*x982))+((cj10*px*x982))+(((354597.0)*sj12))))))+IKsqr(((x986.value)*(((-38700841.0)+(((38700841.0)*(cj12*cj12)))+(((400000000.0)*(pz*pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x985.value)*((((py*sj10*x982))+((cj10*px*x982))+(((354597.0)*sj12))))), ((x986.value)*(((-38700841.0)+(((38700841.0)*(cj12*cj12)))+(((400000000.0)*(pz*pz)))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x987=IKsin(j11);
IkReal x988=IKcos(j11);
IkReal x989=(py*sj10);
IkReal x990=((0.31105)*sj12);
IkReal x991=(cj10*px);
IkReal x992=((1.0)*x987);
evalcond[0]=(pz+(((-0.0114)*x988))+((x987*x990)));
evalcond[1]=(((x988*x990))+(((0.0114)*x987))+x991+x989);
evalcond[2]=((-0.0114)+(((-1.0)*x991*x992))+((pz*x988))+(((-1.0)*x989*x992)));
evalcond[3]=(((x988*x991))+((x988*x989))+((pz*x987))+x990);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x993=(cj10*px);
IkReal x994=(pz*sj12);
IkReal x995=(py*sj10);
IkReal x996=((100000000.0)*pz);
CheckValue<IkReal> x997=IKPowWithIntegerCheck(((((-285000.0)*x995))+(((-285000.0)*x993))+(((7776250.0)*x994))),-1);
if(!x997.valid){
continue;
}
CheckValue<IkReal> x998=IKPowWithIntegerCheck(((((31105000.0)*x994))+(((-1140000.0)*x995))+(((-1140000.0)*x993))),-1);
if(!x998.valid){
continue;
}
if( IKabs(((x997.value)*(((3249.0)+(((-25000000.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x998.value)*(((((-1.0)*x995*x996))+(((354597.0)*sj12))+(((-1.0)*x993*x996)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x997.value)*(((3249.0)+(((-25000000.0)*(pz*pz)))))))+IKsqr(((x998.value)*(((((-1.0)*x995*x996))+(((354597.0)*sj12))+(((-1.0)*x993*x996))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x997.value)*(((3249.0)+(((-25000000.0)*(pz*pz)))))), ((x998.value)*(((((-1.0)*x995*x996))+(((354597.0)*sj12))+(((-1.0)*x993*x996))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x999=IKsin(j11);
IkReal x1000=IKcos(j11);
IkReal x1001=(py*sj10);
IkReal x1002=((0.31105)*sj12);
IkReal x1003=(cj10*px);
IkReal x1004=((1.0)*x999);
evalcond[0]=((((-0.0114)*x1000))+pz+((x1002*x999)));
evalcond[1]=(x1003+x1001+((x1000*x1002))+(((0.0114)*x999)));
evalcond[2]=((-0.0114)+((pz*x1000))+(((-1.0)*x1001*x1004))+(((-1.0)*x1003*x1004)));
evalcond[3]=(x1002+((pz*x999))+((x1000*x1003))+((x1000*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1005=((124420000.0)*sj12);
IkReal x1006=(py*sj10);
IkReal x1007=(cj10*px);
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(IKsign(((-38752825.0)+(((38700841.0)*(cj12*cj12))))),-1);
if(!x1008.valid){
continue;
}
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal((((pz*x1005))+(((4560000.0)*x1006))+(((4560000.0)*x1007)))),IkReal(((((-4560000.0)*pz))+((x1005*x1007))+((x1005*x1006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1008.value)))+(x1009.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1010=IKsin(j11);
IkReal x1011=IKcos(j11);
IkReal x1012=(py*sj10);
IkReal x1013=((0.31105)*sj12);
IkReal x1014=(cj10*px);
IkReal x1015=((1.0)*x1010);
evalcond[0]=(pz+(((-0.0114)*x1011))+((x1010*x1013)));
evalcond[1]=((((0.0114)*x1010))+x1014+x1012+((x1011*x1013)));
evalcond[2]=((-0.0114)+(((-1.0)*x1012*x1015))+(((-1.0)*x1014*x1015))+((pz*x1011)));
evalcond[3]=(x1013+((pz*x1010))+((x1011*x1014))+((x1011*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(-0.0114),IkReal(((0.31105)*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
IkReal x1016=((1.0)*(x1018.value));
if((((0.00012996)+(((0.0967521025)*(sj12*sj12))))) < -0.00001)
continue;
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKabs(IKsqrt(((0.00012996)+(((0.0967521025)*(sj12*sj12)))))),-1);
if(!x1019.valid){
continue;
}
if( ((pz*(x1019.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1019.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1017=IKasin((pz*(x1019.value)));
j11array[0]=((((-1.0)*x1016))+(((-1.0)*x1017)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+x1017+(((-1.0)*x1016)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IkReal j10eval[3];
IkReal x1020=((0.0114)*sj11);
IkReal x1021=((0.31105)*px);
IkReal x1022=(cj11*sj12);
IkReal x1023=((0.31105)*py);
IkReal x1024=((((-1.0)*pp))+(pz*pz));
j10eval[0]=x1024;
j10eval[1]=IKsign(x1024);
j10eval[2]=((IKabs((((cj12*x1023))+((x1021*x1022))+((px*x1020))+(((-0.41)*py)))))+(IKabs((((py*x1020))+((x1022*x1023))+(((0.41)*px))+(((-1.0)*cj12*x1021))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x1025=pz*pz;
IkReal x1026=((50.0)*pp);
IkReal x1027=((0.4674)*sj11);
IkReal x1028=((12.75305)*cj11*sj12);
j10eval[0]=((((-1.0)*x1025))+pp);
j10eval[1]=IKsign(((((-41.0)*x1025))+(((41.0)*pp))));
j10eval[2]=((IKabs(((((-1.0)*py*x1027))+(((-1.0)*py*x1028))+(((-3.560896875)*px))+(((-1.0)*px*x1026)))))+(IKabs((((py*x1026))+(((3.560896875)*py))+(((-1.0)*px*x1027))+(((-1.0)*px*x1028))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x1029=(px*sj11);
IkReal x1030=((0.31105)*cj12);
IkReal x1031=(py*sj11);
IkReal x1032=(cj11*pz);
IkReal x1033=((((-1.0)*sj11*(pz*pz)))+((pp*sj11)));
j10eval[0]=x1033;
j10eval[1]=IKsign(x1033);
j10eval[2]=((IKabs(((((-0.0114)*py))+((py*x1032))+((x1029*x1030))+(((-0.41)*x1029)))))+(IKabs((((px*x1032))+(((0.41)*x1031))+(((-0.0114)*px))+(((-1.0)*x1030*x1031))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=0;
cj11=1.0;
j11=0;
IkReal x1034=pz*pz;
IkReal x1035=((6221.0)*sj12);
IkReal x1036=((6221.0)*cj12);
j10eval[0]=(x1034+(((-1.0)*pp)));
j10eval[1]=IKsign(((((20000.0)*x1034))+(((-20000.0)*pp))));
j10eval[2]=((IKabs(((((8200.0)*px))+((py*x1035))+(((-1.0)*px*x1036)))))+(IKabs((((px*x1035))+((py*x1036))+(((-8200.0)*py))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj11=0;
cj11=1.0;
j11=0;
IkReal x1037=pz*pz;
IkReal x1038=((255061.0)*sj12);
IkReal x1039=((1000000.0)*pp);
j10eval[0]=((((-1.0)*x1037))+pp);
j10eval[1]=IKsign(((((-820000.0)*x1037))+(((820000.0)*pp))));
j10eval[2]=((IKabs(((((71217.9375)*py))+((py*x1039))+(((-1.0)*px*x1038)))))+(IKabs(((((-1.0)*py*x1038))+(((-71217.9375)*px))+(((-1.0)*px*x1039))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[4], cj10array[4], sj10array[4];
bool j10valid[4]={false};
_nj10 = 4;
j10array[0]=0;
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=1.5707963267949;
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
j10array[2]=3.14159265358979;
sj10array[2]=IKsin(j10array[2]);
cj10array[2]=IKcos(j10array[2]);
j10array[3]=-1.5707963267949;
sj10array[3]=IKsin(j10array[3]);
cj10array[3]=IKcos(j10array[3]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
if( j10array[2] > IKPI )
{
    j10array[2]-=IK2PI;
}
else if( j10array[2] < -IKPI )
{    j10array[2]+=IK2PI;
}
j10valid[2] = true;
if( j10array[3] > IKPI )
{
    j10array[3]-=IK2PI;
}
else if( j10array[3] < -IKPI )
{    j10array[3]+=IK2PI;
}
j10valid[3] = true;
for(int ij10 = 0; ij10 < 4; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 4; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1040=((255061.0)*sj12);
IkReal x1041=((1000000.0)*pp);
CheckValue<IkReal> x1042 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1041))+(((-71217.9375)*px))+(((-1.0)*py*x1040)))),IkReal(((((71217.9375)*py))+(((-1.0)*px*x1040))+((py*x1041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(IKsign(((((-820000.0)*(pz*pz)))+(((820000.0)*pp)))),-1);
if(!x1043.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1042.value)+(((1.5707963267949)*(x1043.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x1044=IKsin(j10);
IkReal x1045=IKcos(j10);
IkReal x1046=(px*x1044);
IkReal x1047=(py*x1045);
evalcond[0]=((((0.31105)*sj12))+((px*x1045))+((py*x1044)));
evalcond[1]=((0.41)+(((-0.31105)*cj12))+x1046+(((-1.0)*x1047)));
evalcond[2]=((-0.0712179375)+(((-0.82)*x1046))+(((-1.0)*pp))+(((0.82)*x1047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1048=((6221.0)*sj12);
IkReal x1049=((6221.0)*cj12);
CheckValue<IkReal> x1050 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1049))+((py*x1048))+(((8200.0)*px)))),IkReal((((px*x1048))+((py*x1049))+(((-8200.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1050.valid){
continue;
}
CheckValue<IkReal> x1051=IKPowWithIntegerCheck(IKsign(((((-20000.0)*pp))+(((20000.0)*(pz*pz))))),-1);
if(!x1051.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1050.value)+(((1.5707963267949)*(x1051.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x1052=IKsin(j10);
IkReal x1053=IKcos(j10);
IkReal x1054=(px*x1052);
IkReal x1055=(py*x1053);
evalcond[0]=((((0.31105)*sj12))+((px*x1053))+((py*x1052)));
evalcond[1]=((0.41)+(((-0.31105)*cj12))+x1054+(((-1.0)*x1055)));
evalcond[2]=((-0.0712179375)+(((-0.82)*x1054))+(((-1.0)*pp))+(((0.82)*x1055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x1056=pz*pz;
IkReal x1057=((6221.0)*px);
IkReal x1058=((6221.0)*py);
j10eval[0]=(pp+(((-1.0)*x1056)));
j10eval[1]=IKsign(((((20000.0)*pp))+(((-20000.0)*x1056))));
j10eval[2]=((IKabs(((((-1.0)*cj12*x1058))+(((8200.0)*py))+((sj12*x1057)))))+(IKabs(((((-8200.0)*px))+((sj12*x1058))+((cj12*x1057))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x1059=pz*pz;
IkReal x1060=((255061.0)*sj12);
IkReal x1061=((1000000.0)*pp);
j10eval[0]=(pp+(((-1.0)*x1059)));
j10eval[1]=IKsign(((((-820000.0)*x1059))+(((820000.0)*pp))));
j10eval[2]=((IKabs(((((-1.0)*px*x1061))+((py*x1060))+(((-71217.9375)*px)))))+(IKabs((((py*x1061))+(((71217.9375)*py))+((px*x1060))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[4], cj10array[4], sj10array[4];
bool j10valid[4]={false};
_nj10 = 4;
j10array[0]=0;
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=1.5707963267949;
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
j10array[2]=3.14159265358979;
sj10array[2]=IKsin(j10array[2]);
cj10array[2]=IKcos(j10array[2]);
j10array[3]=-1.5707963267949;
sj10array[3]=IKsin(j10array[3]);
cj10array[3]=IKcos(j10array[3]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
if( j10array[2] > IKPI )
{
    j10array[2]-=IK2PI;
}
else if( j10array[2] < -IKPI )
{    j10array[2]+=IK2PI;
}
j10valid[2] = true;
if( j10array[3] > IKPI )
{
    j10array[3]-=IK2PI;
}
else if( j10array[3] < -IKPI )
{    j10array[3]+=IK2PI;
}
j10valid[3] = true;
for(int ij10 = 0; ij10 < 4; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 4; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1062=((255061.0)*sj12);
IkReal x1063=((1000000.0)*pp);
CheckValue<IkReal> x1064 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1063))+((py*x1062))+(((-71217.9375)*px)))),IkReal((((py*x1063))+(((71217.9375)*py))+((px*x1062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1064.valid){
continue;
}
CheckValue<IkReal> x1065=IKPowWithIntegerCheck(IKsign(((((-820000.0)*(pz*pz)))+(((820000.0)*pp)))),-1);
if(!x1065.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1064.value)+(((1.5707963267949)*(x1065.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x1066=IKsin(j10);
IkReal x1067=IKcos(j10);
IkReal x1068=(px*x1066);
IkReal x1069=(py*x1067);
evalcond[0]=(((py*x1066))+(((-0.31105)*sj12))+((px*x1067)));
evalcond[1]=((0.41)+(((-0.31105)*cj12))+x1068+(((-1.0)*x1069)));
evalcond[2]=((-0.0712179375)+(((-1.0)*pp))+(((-0.82)*x1068))+(((0.82)*x1069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1070=((6221.0)*px);
IkReal x1071=((6221.0)*py);
CheckValue<IkReal> x1072 = IKatan2WithCheck(IkReal((((sj12*x1071))+(((-8200.0)*px))+((cj12*x1070)))),IkReal(((((8200.0)*py))+(((-1.0)*cj12*x1071))+((sj12*x1070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1072.valid){
continue;
}
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(IKsign(((((-20000.0)*(pz*pz)))+(((20000.0)*pp)))),-1);
if(!x1073.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1072.value)+(((1.5707963267949)*(x1073.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x1074=IKsin(j10);
IkReal x1075=IKcos(j10);
IkReal x1076=(px*x1074);
IkReal x1077=(py*x1075);
evalcond[0]=(((px*x1075))+((py*x1074))+(((-0.31105)*sj12)));
evalcond[1]=((0.41)+(((-0.31105)*cj12))+x1076+(((-1.0)*x1077)));
evalcond[2]=((-0.0712179375)+(((-1.0)*pp))+(((-0.82)*x1076))+(((0.82)*x1077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1078=(px*sj11);
IkReal x1079=((0.31105)*cj12);
IkReal x1080=(py*sj11);
IkReal x1081=(cj11*pz);
CheckValue<IkReal> x1082 = IKatan2WithCheck(IkReal(((((-0.41)*x1078))+((py*x1081))+((x1078*x1079))+(((-0.0114)*py)))),IkReal((((px*x1081))+(((-0.0114)*px))+(((-1.0)*x1079*x1080))+(((0.41)*x1080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1082.valid){
continue;
}
CheckValue<IkReal> x1083=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj11*(pz*pz)))+((pp*sj11)))),-1);
if(!x1083.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1082.value)+(((1.5707963267949)*(x1083.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x1084=IKcos(j10);
IkReal x1085=IKsin(j10);
IkReal x1086=((0.31105)*sj12);
IkReal x1087=((1.0)*sj11);
IkReal x1088=(px*x1085);
IkReal x1089=(px*x1084);
IkReal x1090=(py*x1085);
IkReal x1091=(py*x1084);
evalcond[0]=((0.41)+(((-0.31105)*cj12))+x1088+(((-1.0)*x1091)));
evalcond[1]=((-0.0712179375)+(((0.82)*x1091))+(((-0.82)*x1088))+(((-1.0)*pp)));
evalcond[2]=((((0.0114)*sj11))+x1090+x1089+((cj11*x1086)));
evalcond[3]=((-0.0114)+(((-1.0)*x1087*x1089))+(((-1.0)*x1087*x1090))+((cj11*pz)));
evalcond[4]=(x1086+((pz*sj11))+((cj11*x1089))+((cj11*x1090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1092=((0.4674)*sj11);
IkReal x1093=((50.0)*pp);
IkReal x1094=((12.75305)*cj11*sj12);
CheckValue<IkReal> x1095 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1094))+(((-1.0)*py*x1092))+(((-3.560896875)*px))+(((-1.0)*px*x1093)))),IkReal(((((3.560896875)*py))+((py*x1093))+(((-1.0)*px*x1094))+(((-1.0)*px*x1092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1095.valid){
continue;
}
CheckValue<IkReal> x1096=IKPowWithIntegerCheck(IKsign(((((-41.0)*(pz*pz)))+(((41.0)*pp)))),-1);
if(!x1096.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1095.value)+(((1.5707963267949)*(x1096.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x1097=IKcos(j10);
IkReal x1098=IKsin(j10);
IkReal x1099=((0.31105)*sj12);
IkReal x1100=((1.0)*sj11);
IkReal x1101=(px*x1098);
IkReal x1102=(px*x1097);
IkReal x1103=(py*x1098);
IkReal x1104=(py*x1097);
evalcond[0]=((0.41)+x1101+(((-0.31105)*cj12))+(((-1.0)*x1104)));
evalcond[1]=((-0.0712179375)+(((-0.82)*x1101))+(((0.82)*x1104))+(((-1.0)*pp)));
evalcond[2]=((((0.0114)*sj11))+x1102+x1103+((cj11*x1099)));
evalcond[3]=((-0.0114)+(((-1.0)*x1100*x1102))+(((-1.0)*x1100*x1103))+((cj11*pz)));
evalcond[4]=(x1099+((pz*sj11))+((cj11*x1102))+((cj11*x1103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1105=((0.0114)*sj11);
IkReal x1106=((0.31105)*px);
IkReal x1107=(cj11*sj12);
IkReal x1108=((0.31105)*py);
CheckValue<IkReal> x1109 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*x1106))+(((0.41)*px))+((py*x1105))+((x1107*x1108)))),IkReal(((((-0.41)*py))+((px*x1105))+((x1106*x1107))+((cj12*x1108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1109.valid){
continue;
}
CheckValue<IkReal> x1110=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1110.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1109.value)+(((1.5707963267949)*(x1110.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x1111=IKcos(j10);
IkReal x1112=IKsin(j10);
IkReal x1113=((0.31105)*sj12);
IkReal x1114=((1.0)*sj11);
IkReal x1115=(px*x1112);
IkReal x1116=(px*x1111);
IkReal x1117=(py*x1112);
IkReal x1118=(py*x1111);
evalcond[0]=((0.41)+x1115+(((-0.31105)*cj12))+(((-1.0)*x1118)));
evalcond[1]=((-0.0712179375)+(((0.82)*x1118))+(((-0.82)*x1115))+(((-1.0)*pp)));
evalcond[2]=((((0.0114)*sj11))+x1117+x1116+((cj11*x1113)));
evalcond[3]=((-0.0114)+(((-1.0)*x1114*x1116))+(((-1.0)*x1114*x1117))+((cj11*pz)));
evalcond[4]=(x1113+((pz*sj11))+((cj11*x1117))+((cj11*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x70=(cj12*sj10);
IkReal x71=(r22*sj11);
IkReal x72=(sj10*sj11);
IkReal x73=(cj10*sj12);
IkReal x74=(cj10*cj12);
IkReal x75=(sj10*sj12);
IkReal x76=(cj10*sj11);
IkReal x77=((1.0)*cj11);
IkReal x78=(sj11*sj12);
IkReal x79=(cj12*sj11);
IkReal x80=(((cj11*x70))+(((-1.0)*x73)));
IkReal x81=(((cj11*x74))+x75);
IkReal x82=(((cj11*x75))+x74);
IkReal x83=(((cj11*x73))+(((-1.0)*x70)));
new_r00=(((r10*x80))+((r00*x81))+((r20*x79)));
new_r01=(((r21*x79))+((r11*x80))+((r01*x81)));
new_r02=(((r12*x80))+((cj12*x71))+((r02*x81)));
new_r10=(((r10*x72))+(((-1.0)*r20*x77))+((r00*x76)));
new_r11=(((r11*x72))+(((-1.0)*r21*x77))+((r01*x76)));
new_r12=((((-1.0)*r22*x77))+((r02*x76))+((r12*x72)));
new_r20=(((r10*x82))+((r00*x83))+((r20*x78)));
new_r21=(((r21*x78))+((r11*x82))+((r01*x83)));
new_r22=(((sj12*x71))+((r12*x82))+((r02*x83)));
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
cj14array[0]=((-1.0)*new_r22);
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j13eval[3];
j13eval[0]=sj14;
j13eval[1]=IKsign(sj14);
j13eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
j15eval[0]=sj14;
j15eval[1]=IKsign(sj14);
j15eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
j13eval[0]=new_r12;
j13eval[1]=sj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j15mul = 1;
j15=0;
j13mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].fmul = j13mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].fmul = j15mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j15mul = 1;
j15=0;
j13mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].fmul = j13mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].fmul = j15mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x84=new_r22*new_r22;
IkReal x85=((16.0)*new_r10);
IkReal x86=((16.0)*new_r01);
IkReal x87=((16.0)*new_r22);
IkReal x88=((8.0)*new_r11);
IkReal x89=((8.0)*new_r00);
IkReal x90=(x84*x85);
IkReal x91=(x84*x86);
j13eval[0]=((IKabs((x86+(((-1.0)*x91)))))+(IKabs((x91+(((-1.0)*x86)))))+(IKabs((((x84*x88))+(((-1.0)*new_r22*x89)))))+(IKabs((x85+(((-1.0)*x90)))))+(IKabs((((new_r22*x88))+(((-1.0)*x89)))))+(IKabs(((((32.0)*new_r11))+(((-16.0)*new_r11*x84))+(((-1.0)*new_r00*x87)))))+(IKabs(((((16.0)*new_r00))+((new_r11*x87))+(((-32.0)*new_r00*x84)))))+(IKabs((x90+(((-1.0)*x85))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j15]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j13evalpoly[1];
IkReal x92=new_r22*new_r22;
IkReal x93=((16.0)*new_r10);
IkReal x94=(new_r11*new_r22);
IkReal x95=(x92*x93);
IkReal x96=((((8.0)*x94))+(((-8.0)*new_r00)));
op[0]=x96;
op[1]=(x93+(((-1.0)*x95)));
op[2]=((((16.0)*x94))+(((16.0)*new_r00))+(((-32.0)*new_r00*x92)));
op[3]=(x95+(((-1.0)*x93)));
op[4]=x96;
polyroots4(op,zeror,numroots);
IkReal j13array[4], cj13array[4], sj13array[4], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[4]={true,true,true,true};
_nj13 = 4;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x97=((16.0)*new_r01);
IkReal x98=new_r22*new_r22;
IkReal x99=(new_r00*new_r22);
IkReal x100=((8.0)*x99);
IkReal x101=(new_r11*x98);
IkReal x102=(x97*x98);
IkReal x103=((8.0)*x101);
j13evalpoly[0]=((((htj13*htj13*htj13*htj13)*(((((-1.0)*x100))+x103))))+(((-1.0)*x100))+(((htj13*htj13*htj13)*((x102+(((-1.0)*x97))))))+x103+((htj13*(((((-1.0)*x102))+x97))))+(((htj13*htj13)*(((((32.0)*new_r11))+(((-16.0)*x99))+(((-16.0)*x101)))))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j15eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x104=cj13*cj13;
IkReal x105=new_r22*new_r22;
IkReal x106=((1.0)*new_r10);
IkReal x107=(new_r22*sj13);
IkReal x108=(x104+x105+(((-1.0)*x104*x105)));
j15eval[0]=x108;
j15eval[1]=((IKabs(((((-1.0)*cj13*x106))+((new_r11*x107)))))+(IKabs(((((-1.0)*x106*x107))+(((-1.0)*cj13*new_r11))))));
j15eval[2]=IKsign(x108);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=new_r22;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r00, new_r01);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x109=IKcos(j15);
IkReal x110=IKsin(j15);
IkReal x111=((1.0)*x110);
evalcond[0]=(x110+(((-1.0)*new_r00)));
evalcond[1]=(x109+(((-1.0)*new_r01)));
evalcond[2]=(((new_r22*x109))+new_r10);
evalcond[3]=(x109+((new_r10*new_r22)));
evalcond[4]=((((-1.0)*new_r22*x111))+new_r11);
evalcond[5]=((((-1.0)*x111))+((new_r11*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x112=IKcos(j15);
IkReal x113=IKsin(j15);
IkReal x114=((1.0)*new_r22);
evalcond[0]=(x113+new_r00);
evalcond[1]=(x112+new_r01);
evalcond[2]=((((-1.0)*new_r10*x114))+x112);
evalcond[3]=(((new_r22*x112))+(((-1.0)*new_r10)));
evalcond[4]=((((-1.0)*x113*x114))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r11*x114))+(((-1.0)*x113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x115=new_r22*new_r22;
CheckValue<IkReal> x116=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x115))),-1);
if(!x116.valid){
continue;
}
if((((-1.0)*x115*(x116.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x115*(x116.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj13)))))+(IKabs((cj13+(((-1.0)*gconst12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x117=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
if( IKabs((((new_r00*x117))+(((-1.0)*gconst12*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x117))+(((-1.0)*gconst12*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x117))+(((-1.0)*gconst12*new_r10))))+IKsqr((((new_r01*x117))+(((-1.0)*gconst12*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((new_r00*x117))+(((-1.0)*gconst12*new_r10))), (((new_r01*x117))+(((-1.0)*gconst12*new_r11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[10];
IkReal x118=IKcos(j15);
IkReal x119=IKsin(j15);
IkReal x120=(gconst12*new_r22);
IkReal x121=(new_r22*x118);
IkReal x122=((1.0)*x119);
IkReal x123=x117;
IkReal x124=((1.0)*x123);
IkReal x125=(new_r10*x123);
IkReal x126=(new_r11*x123);
evalcond[0]=((((-1.0)*new_r00*x124))+x119+((gconst12*new_r10)));
evalcond[1]=((((-1.0)*new_r01*x124))+x118+((gconst12*new_r11)));
evalcond[2]=(((gconst12*new_r00))+x125+x121);
evalcond[3]=(((new_r00*x120))+((new_r22*x125))+x118);
evalcond[4]=(((gconst12*new_r01))+x126+(((-1.0)*new_r22*x122)));
evalcond[5]=(((x121*x123))+((gconst12*x119))+new_r10);
evalcond[6]=((((-1.0)*new_r22*x122*x123))+((gconst12*x118))+new_r11);
evalcond[7]=(new_r00+((x118*x120))+(((-1.0)*x122*x123)));
evalcond[8]=(((new_r01*x120))+((new_r22*x126))+(((-1.0)*x122)));
evalcond[9]=((((-1.0)*x118*x124))+(((-1.0)*x120*x122))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x127=new_r22*new_r22;
CheckValue<IkReal> x128=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x127))),-1);
if(!x128.valid){
continue;
}
if((((-1.0)*x127*(x128.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x127*(x128.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj13)))))+(IKabs((cj13+(((-1.0)*gconst12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x129=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
if( IKabs(((((-1.0)*gconst12*new_r10))+(((-1.0)*new_r00*x129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x129))+(((-1.0)*gconst12*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst12*new_r10))+(((-1.0)*new_r00*x129))))+IKsqr(((((-1.0)*new_r01*x129))+(((-1.0)*gconst12*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*gconst12*new_r10))+(((-1.0)*new_r00*x129))), ((((-1.0)*new_r01*x129))+(((-1.0)*gconst12*new_r11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[10];
IkReal x130=IKcos(j15);
IkReal x131=IKsin(j15);
IkReal x132=(gconst12*new_r22);
IkReal x133=(new_r22*x130);
IkReal x134=((1.0)*x131);
IkReal x135=x129;
IkReal x136=((1.0)*x135);
IkReal x137=(new_r22*x136);
IkReal x138=(x131*x135);
evalcond[0]=(((new_r00*x135))+x131+((gconst12*new_r10)));
evalcond[1]=(((new_r01*x135))+x130+((gconst12*new_r11)));
evalcond[2]=(((gconst12*x130))+((new_r22*x138))+new_r11);
evalcond[3]=((((-1.0)*new_r10*x136))+((gconst12*new_r00))+x133);
evalcond[4]=(x138+((x130*x132))+new_r00);
evalcond[5]=((((-1.0)*new_r10*x137))+((new_r00*x132))+x130);
evalcond[6]=((((-1.0)*new_r11*x136))+((gconst12*new_r01))+(((-1.0)*new_r22*x134)));
evalcond[7]=((((-1.0)*x132*x134))+((x130*x135))+new_r01);
evalcond[8]=(((gconst12*x131))+(((-1.0)*x133*x136))+new_r10);
evalcond[9]=((((-1.0)*new_r11*x137))+((new_r01*x132))+(((-1.0)*x134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x139=new_r22*new_r22;
CheckValue<IkReal> x140=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x139))),-1);
if(!x140.valid){
continue;
}
if((((-1.0)*x139*(x140.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x139*(x140.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj13)))))+(IKabs((cj13+(((-1.0)*gconst13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x141=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
if( IKabs((((new_r00*x141))+(((-1.0)*gconst13*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x141))+(((-1.0)*gconst13*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x141))+(((-1.0)*gconst13*new_r10))))+IKsqr((((new_r01*x141))+(((-1.0)*gconst13*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((new_r00*x141))+(((-1.0)*gconst13*new_r10))), (((new_r01*x141))+(((-1.0)*gconst13*new_r11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[10];
IkReal x142=IKcos(j15);
IkReal x143=IKsin(j15);
IkReal x144=(gconst13*new_r01);
IkReal x145=(gconst13*new_r00);
IkReal x146=(new_r22*x142);
IkReal x147=((1.0)*x143);
IkReal x148=x141;
IkReal x149=((1.0)*x148);
IkReal x150=(new_r22*x148);
IkReal x151=(x147*x148);
evalcond[0]=(x143+((gconst13*new_r10))+(((-1.0)*new_r00*x149)));
evalcond[1]=((((-1.0)*new_r01*x149))+x142+((gconst13*new_r11)));
evalcond[2]=(((new_r10*x148))+x145+x146);
evalcond[3]=(((new_r10*x150))+x142+((new_r22*x145)));
evalcond[4]=(((new_r11*x148))+(((-1.0)*new_r22*x147))+x144);
evalcond[5]=(((x146*x148))+new_r10+((gconst13*x143)));
evalcond[6]=((((-1.0)*x147*x150))+new_r11+((gconst13*x142)));
evalcond[7]=((((-1.0)*x151))+new_r00+((gconst13*x146)));
evalcond[8]=((((-1.0)*x147))+((new_r11*x150))+((new_r22*x144)));
evalcond[9]=((((-1.0)*x142*x149))+(((-1.0)*gconst13*new_r22*x147))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x152=new_r22*new_r22;
CheckValue<IkReal> x153=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x152))),-1);
if(!x153.valid){
continue;
}
if((((-1.0)*x152*(x153.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x152*(x153.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj13)))))+(IKabs((cj13+(((-1.0)*gconst13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x154=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
if( IKabs(((((-1.0)*gconst13*new_r10))+(((-1.0)*new_r00*x154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*x154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst13*new_r10))+(((-1.0)*new_r00*x154))))+IKsqr(((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*x154))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*gconst13*new_r10))+(((-1.0)*new_r00*x154))), ((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*x154))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[10];
IkReal x155=IKcos(j15);
IkReal x156=IKsin(j15);
IkReal x157=(gconst13*new_r01);
IkReal x158=(gconst13*new_r00);
IkReal x159=(new_r22*x155);
IkReal x160=(new_r22*x156);
IkReal x161=x154;
IkReal x162=((1.0)*x161);
evalcond[0]=(((new_r00*x161))+x156+((gconst13*new_r10)));
evalcond[1]=(((new_r01*x161))+x155+((gconst13*new_r11)));
evalcond[2]=(((gconst13*x155))+new_r11+((x160*x161)));
evalcond[3]=((((-1.0)*new_r10*x162))+x159+x158);
evalcond[4]=(((gconst13*x159))+((x156*x161))+new_r00);
evalcond[5]=(x155+((new_r22*x158))+(((-1.0)*new_r10*new_r22*x162)));
evalcond[6]=((((-1.0)*new_r11*x162))+x157+(((-1.0)*x160)));
evalcond[7]=((((-1.0)*gconst13*x160))+((x155*x161))+new_r01);
evalcond[8]=(((gconst13*x156))+(((-1.0)*x159*x162))+new_r10);
evalcond[9]=((((-1.0)*new_r11*new_r22*x162))+((new_r22*x157))+(((-1.0)*x156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x163=(new_r01*new_r22);
IkReal x164=(cj13*new_r11);
CheckValue<IkReal> x165=IKPowWithIntegerCheck(cj13,-1);
if(!x165.valid){
continue;
}
if( IKabs(((x165.value)*((((x163*(cj13*cj13)))+(((-1.0)*x163))+((new_r22*sj13*x164))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x164))+((new_r01*sj13)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x165.value)*((((x163*(cj13*cj13)))+(((-1.0)*x163))+((new_r22*sj13*x164))+(((-1.0)*new_r10))))))+IKsqr(((((-1.0)*x164))+((new_r01*sj13))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x165.value)*((((x163*(cj13*cj13)))+(((-1.0)*x163))+((new_r22*sj13*x164))+(((-1.0)*new_r10))))), ((((-1.0)*x164))+((new_r01*sj13))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[10];
IkReal x166=IKcos(j15);
IkReal x167=IKsin(j15);
IkReal x168=((1.0)*sj13);
IkReal x169=(new_r11*sj13);
IkReal x170=(cj13*new_r00);
IkReal x171=(new_r10*sj13);
IkReal x172=(cj13*new_r01);
IkReal x173=(new_r22*x166);
IkReal x174=((1.0)*new_r22*x167);
evalcond[0]=((((-1.0)*new_r00*x168))+((cj13*new_r10))+x167);
evalcond[1]=(((cj13*new_r11))+x166+(((-1.0)*new_r01*x168)));
evalcond[2]=(x171+x170+x173);
evalcond[3]=(x166+((new_r22*x170))+((new_r22*x171)));
evalcond[4]=((((-1.0)*x174))+x172+x169);
evalcond[5]=(((cj13*x167))+((sj13*x173))+new_r10);
evalcond[6]=(((cj13*x166))+(((-1.0)*new_r22*x167*x168))+new_r11);
evalcond[7]=(((cj13*x173))+new_r00+(((-1.0)*x167*x168)));
evalcond[8]=((((-1.0)*x167))+((new_r22*x172))+((new_r22*x169)));
evalcond[9]=((((-1.0)*x166*x168))+(((-1.0)*cj13*x174))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x175=((1.0)*new_r10);
CheckValue<IkReal> x176=IKPowWithIntegerCheck(new_r22,-1);
if(!x176.valid){
continue;
}
if( IKabs(((((-1.0)*cj13*x175))+((new_r00*sj13)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x176.value)*(((((-1.0)*sj13*x175))+(((-1.0)*cj13*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj13*x175))+((new_r00*sj13))))+IKsqr(((x176.value)*(((((-1.0)*sj13*x175))+(((-1.0)*cj13*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj13*x175))+((new_r00*sj13))), ((x176.value)*(((((-1.0)*sj13*x175))+(((-1.0)*cj13*new_r00))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[10];
IkReal x177=IKcos(j15);
IkReal x178=IKsin(j15);
IkReal x179=((1.0)*sj13);
IkReal x180=(new_r11*sj13);
IkReal x181=(cj13*new_r00);
IkReal x182=(new_r10*sj13);
IkReal x183=(cj13*new_r01);
IkReal x184=(new_r22*x177);
IkReal x185=((1.0)*new_r22*x178);
evalcond[0]=(((cj13*new_r10))+x178+(((-1.0)*new_r00*x179)));
evalcond[1]=(((cj13*new_r11))+x177+(((-1.0)*new_r01*x179)));
evalcond[2]=(x184+x181+x182);
evalcond[3]=(x177+((new_r22*x182))+((new_r22*x181)));
evalcond[4]=((((-1.0)*x185))+x180+x183);
evalcond[5]=(((cj13*x178))+((sj13*x184))+new_r10);
evalcond[6]=(((cj13*x177))+new_r11+(((-1.0)*new_r22*x178*x179)));
evalcond[7]=((((-1.0)*x178*x179))+new_r00+((cj13*x184)));
evalcond[8]=((((-1.0)*x178))+((new_r22*x183))+((new_r22*x180)));
evalcond[9]=((((-1.0)*x177*x179))+(((-1.0)*cj13*x185))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x186=cj13*cj13;
IkReal x187=new_r22*new_r22;
IkReal x188=((1.0)*cj13);
IkReal x189=(new_r22*sj13);
CheckValue<IkReal> x190 = IKatan2WithCheck(IkReal((((new_r11*x189))+(((-1.0)*new_r10*x188)))),IkReal(((((-1.0)*new_r11*x188))+(((-1.0)*new_r10*x189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191=IKPowWithIntegerCheck(IKsign((x186+x187+(((-1.0)*x186*x187)))),-1);
if(!x191.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x190.value)+(((1.5707963267949)*(x191.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[10];
IkReal x192=IKcos(j15);
IkReal x193=IKsin(j15);
IkReal x194=((1.0)*sj13);
IkReal x195=(new_r11*sj13);
IkReal x196=(cj13*new_r00);
IkReal x197=(new_r10*sj13);
IkReal x198=(cj13*new_r01);
IkReal x199=(new_r22*x192);
IkReal x200=((1.0)*new_r22*x193);
evalcond[0]=(((cj13*new_r10))+x193+(((-1.0)*new_r00*x194)));
evalcond[1]=(((cj13*new_r11))+x192+(((-1.0)*new_r01*x194)));
evalcond[2]=(x199+x197+x196);
evalcond[3]=(x192+((new_r22*x197))+((new_r22*x196)));
evalcond[4]=(x198+x195+(((-1.0)*x200)));
evalcond[5]=(((sj13*x199))+new_r10+((cj13*x193)));
evalcond[6]=((((-1.0)*new_r22*x193*x194))+new_r11+((cj13*x192)));
evalcond[7]=(new_r00+(((-1.0)*x193*x194))+((cj13*x199)));
evalcond[8]=((((-1.0)*x193))+((new_r22*x195))+((new_r22*x198)));
evalcond[9]=((((-1.0)*x192*x194))+(((-1.0)*cj13*x200))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x202=IKPowWithIntegerCheck(sj14,-1);
if(!x202.valid){
continue;
}
IkReal x201=x202.value;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(new_r12,-1);
if(!x203.valid){
continue;
}
if( IKabs((x201*(x203.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj14*cj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x201)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x201*(x203.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj14*cj14)))))))+IKsqr((new_r02*x201))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((x201*(x203.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj14*cj14)))))), (new_r02*x201));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x204=IKcos(j13);
IkReal x205=IKsin(j13);
IkReal x206=((1.0)*sj14);
IkReal x207=((1.0)*cj14);
IkReal x208=((1.0)*x204);
IkReal x209=(new_r12*x205);
IkReal x210=(sj14*x204);
IkReal x211=(sj14*x205);
evalcond[0]=((((-1.0)*x204*x206))+new_r02);
evalcond[1]=((((-1.0)*x205*x206))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x205))+((new_r12*x204)));
evalcond[3]=(((new_r02*x204))+(((-1.0)*x206))+x209);
evalcond[4]=((((-1.0)*new_r20*x207))+((new_r00*x210))+((new_r10*x211)));
evalcond[5]=((((-1.0)*new_r21*x207))+((new_r01*x210))+((new_r11*x211)));
evalcond[6]=((-1.0)+(((-1.0)*new_r22*x207))+((sj14*x209))+((new_r02*x210)));
evalcond[7]=((((-1.0)*new_r22*x206))+(((-1.0)*new_r02*x204*x207))+(((-1.0)*x207*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[3];
j15eval[0]=sj14;
j15eval[1]=IKsign(sj14);
j15eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x212=((1.0)*cj13);
if( IKabs(((((-1.0)*new_r11*sj13))+(((-1.0)*new_r01*x212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x212))+((new_r01*sj13)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj13))+(((-1.0)*new_r01*x212))))+IKsqr(((((-1.0)*new_r11*x212))+((new_r01*sj13))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*new_r11*sj13))+(((-1.0)*new_r01*x212))), ((((-1.0)*new_r11*x212))+((new_r01*sj13))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x213=IKsin(j15);
IkReal x214=IKcos(j15);
IkReal x215=((1.0)*sj13);
IkReal x216=(cj13*x213);
IkReal x217=((1.0)*x214);
IkReal x218=(x214*x215);
evalcond[0]=(((cj13*new_r01))+x213+((new_r11*sj13)));
evalcond[1]=(((cj13*new_r10))+x213+(((-1.0)*new_r00*x215)));
evalcond[2]=(((cj13*new_r11))+x214+(((-1.0)*new_r01*x215)));
evalcond[3]=(((cj13*x214))+new_r11+((sj13*x213)));
evalcond[4]=(((cj13*new_r00))+(((-1.0)*x217))+((new_r10*sj13)));
evalcond[5]=(x216+new_r01+(((-1.0)*x218)));
evalcond[6]=(x216+new_r10+(((-1.0)*x218)));
evalcond[7]=((((-1.0)*cj13*x217))+(((-1.0)*x213*x215))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x219=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj13*x219))+((new_r11*sj13)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj13*new_r11))+(((-1.0)*sj13*x219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj13*x219))+((new_r11*sj13))))+IKsqr(((((-1.0)*cj13*new_r11))+(((-1.0)*sj13*x219))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj13*x219))+((new_r11*sj13))), ((((-1.0)*cj13*new_r11))+(((-1.0)*sj13*x219))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x220=IKcos(j15);
IkReal x221=IKsin(j15);
IkReal x222=((1.0)*sj13);
IkReal x223=(cj13*x220);
IkReal x224=((1.0)*x221);
IkReal x225=(x221*x222);
evalcond[0]=(((cj13*new_r00))+x220+((new_r10*sj13)));
evalcond[1]=(((cj13*new_r10))+x221+(((-1.0)*new_r00*x222)));
evalcond[2]=((((-1.0)*new_r01*x222))+((cj13*new_r11))+x220);
evalcond[3]=(((cj13*new_r01))+((new_r11*sj13))+(((-1.0)*x224)));
evalcond[4]=(((sj13*x220))+((cj13*x221))+new_r10);
evalcond[5]=(x223+new_r11+(((-1.0)*x225)));
evalcond[6]=(x223+new_r00+(((-1.0)*x225)));
evalcond[7]=((((-1.0)*cj13*x224))+(((-1.0)*x220*x222))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x226=IKsin(j15);
IkReal x227=IKcos(j15);
IkReal x228=((1.0)*sj14);
IkReal x229=((1.0)*cj14);
evalcond[0]=(x226+new_r10);
evalcond[1]=(x227+new_r11);
evalcond[2]=(new_r21+((sj14*x226)));
evalcond[3]=(((cj14*x226))+new_r01);
evalcond[4]=((((-1.0)*x227*x228))+new_r20);
evalcond[5]=((((-1.0)*x227*x229))+new_r00);
evalcond[6]=(x227+(((-1.0)*new_r20*x228))+(((-1.0)*new_r00*x229)));
evalcond[7]=((((-1.0)*new_r01*x229))+(((-1.0)*new_r21*x228))+(((-1.0)*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r10, new_r11);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x230=IKsin(j15);
IkReal x231=IKcos(j15);
IkReal x232=((1.0)*sj14);
evalcond[0]=(((sj14*x230))+new_r21);
evalcond[1]=(x230+(((-1.0)*new_r10)));
evalcond[2]=(x231+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x231*x232))+new_r20);
evalcond[4]=(((cj14*x230))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj14*x231))+(((-1.0)*new_r00)));
evalcond[6]=(((cj14*new_r00))+(((-1.0)*new_r20*x232))+x231);
evalcond[7]=(((cj14*new_r01))+(((-1.0)*new_r21*x232))+(((-1.0)*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r00, new_r01);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x233=IKsin(j15);
IkReal x234=IKcos(j15);
IkReal x235=((1.0)*sj14);
IkReal x236=((1.0)*cj14);
evalcond[0]=(((sj14*x233))+new_r21);
evalcond[1]=(x233+(((-1.0)*new_r00)));
evalcond[2]=(x234+(((-1.0)*new_r01)));
evalcond[3]=(((cj14*x233))+new_r11);
evalcond[4]=(new_r20+(((-1.0)*x234*x235)));
evalcond[5]=(new_r10+(((-1.0)*x234*x236)));
evalcond[6]=((((-1.0)*new_r20*x235))+x234+(((-1.0)*new_r10*x236)));
evalcond[7]=((((-1.0)*new_r21*x235))+(((-1.0)*x233))+(((-1.0)*new_r11*x236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x237=IKsin(j15);
IkReal x238=IKcos(j15);
IkReal x239=((1.0)*sj14);
evalcond[0]=(x237+new_r00);
evalcond[1]=(x238+new_r01);
evalcond[2]=(((sj14*x237))+new_r21);
evalcond[3]=((((-1.0)*x238*x239))+new_r20);
evalcond[4]=(((cj14*x237))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*cj14*x238))+(((-1.0)*new_r10)));
evalcond[6]=(((cj14*new_r10))+(((-1.0)*new_r20*x239))+x238);
evalcond[7]=(((cj14*new_r11))+(((-1.0)*new_r21*x239))+(((-1.0)*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j15eval[0]=1.0;
if( IKabs(j15eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j15]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j15array[2], cj15array[2], sj15array[2], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[2]={true,true};
_nj15 = 2;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x241=IKPowWithIntegerCheck(sj14,-1);
if(!x241.valid){
continue;
}
IkReal x240=x241.value;
CheckValue<IkReal> x242=IKPowWithIntegerCheck(sj13,-1);
if(!x242.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x240)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x240*(x242.value)*(((((-1.0)*cj13*cj14*new_r21))+((new_r01*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x240))+IKsqr((x240*(x242.value)*(((((-1.0)*cj13*cj14*new_r21))+((new_r01*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r21*x240), (x240*(x242.value)*(((((-1.0)*cj13*cj14*new_r21))+((new_r01*sj14))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[12];
IkReal x243=IKsin(j15);
IkReal x244=IKcos(j15);
IkReal x245=((1.0)*sj13);
IkReal x246=((1.0)*sj14);
IkReal x247=(cj14*x244);
IkReal x248=(cj14*x243);
IkReal x249=((1.0)*cj13*cj14);
evalcond[0]=(((sj14*x243))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x244*x246)));
evalcond[2]=(((cj13*new_r10))+(((-1.0)*new_r00*x245))+x243);
evalcond[3]=((((-1.0)*new_r01*x245))+((cj13*new_r11))+x244);
evalcond[4]=(((cj13*new_r01))+x248+((new_r11*sj13)));
evalcond[5]=(((sj13*x248))+((cj13*x244))+new_r11);
evalcond[6]=(((cj13*new_r00))+(((-1.0)*x247))+((new_r10*sj13)));
evalcond[7]=(((cj13*x248))+new_r01+(((-1.0)*x244*x245)));
evalcond[8]=(((cj13*x243))+(((-1.0)*x245*x247))+new_r10);
evalcond[9]=((((-1.0)*cj13*x247))+(((-1.0)*x243*x245))+new_r00);
evalcond[10]=((((-1.0)*new_r00*x249))+(((-1.0)*cj14*new_r10*x245))+x244+(((-1.0)*new_r20*x246)));
evalcond[11]=((((-1.0)*new_r01*x249))+(((-1.0)*x243))+(((-1.0)*new_r21*x246))+(((-1.0)*cj14*new_r11*x245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x251=IKPowWithIntegerCheck(sj14,-1);
if(!x251.valid){
continue;
}
IkReal x250=x251.value;
CheckValue<IkReal> x252=IKPowWithIntegerCheck(cj13,-1);
if(!x252.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x250)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x250*(x252.value)*((((cj14*new_r21*sj13))+(((-1.0)*new_r11*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x250))+IKsqr((x250*(x252.value)*((((cj14*new_r21*sj13))+(((-1.0)*new_r11*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r21*x250), (x250*(x252.value)*((((cj14*new_r21*sj13))+(((-1.0)*new_r11*sj14))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[12];
IkReal x253=IKsin(j15);
IkReal x254=IKcos(j15);
IkReal x255=((1.0)*sj13);
IkReal x256=((1.0)*sj14);
IkReal x257=(cj14*x254);
IkReal x258=(cj14*x253);
IkReal x259=((1.0)*cj13*cj14);
evalcond[0]=(new_r21+((sj14*x253)));
evalcond[1]=((((-1.0)*x254*x256))+new_r20);
evalcond[2]=(((cj13*new_r10))+x253+(((-1.0)*new_r00*x255)));
evalcond[3]=((((-1.0)*new_r01*x255))+((cj13*new_r11))+x254);
evalcond[4]=(((cj13*new_r01))+x258+((new_r11*sj13)));
evalcond[5]=(((sj13*x258))+((cj13*x254))+new_r11);
evalcond[6]=(((cj13*new_r00))+((new_r10*sj13))+(((-1.0)*x257)));
evalcond[7]=((((-1.0)*x254*x255))+((cj13*x258))+new_r01);
evalcond[8]=((((-1.0)*x255*x257))+((cj13*x253))+new_r10);
evalcond[9]=(new_r00+(((-1.0)*x253*x255))+(((-1.0)*cj13*x257)));
evalcond[10]=((((-1.0)*cj14*new_r10*x255))+x254+(((-1.0)*new_r20*x256))+(((-1.0)*new_r00*x259)));
evalcond[11]=((((-1.0)*new_r21*x256))+(((-1.0)*new_r01*x259))+(((-1.0)*cj14*new_r11*x255))+(((-1.0)*x253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x260 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x260.valid){
continue;
}
CheckValue<IkReal> x261=IKPowWithIntegerCheck(IKsign(sj14),-1);
if(!x261.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x260.value)+(((1.5707963267949)*(x261.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[12];
IkReal x262=IKsin(j15);
IkReal x263=IKcos(j15);
IkReal x264=((1.0)*sj13);
IkReal x265=((1.0)*sj14);
IkReal x266=(cj14*x263);
IkReal x267=(cj14*x262);
IkReal x268=((1.0)*cj13*cj14);
evalcond[0]=(((sj14*x262))+new_r21);
evalcond[1]=((((-1.0)*x263*x265))+new_r20);
evalcond[2]=(((cj13*new_r10))+(((-1.0)*new_r00*x264))+x262);
evalcond[3]=((((-1.0)*new_r01*x264))+((cj13*new_r11))+x263);
evalcond[4]=(((cj13*new_r01))+x267+((new_r11*sj13)));
evalcond[5]=(((sj13*x267))+((cj13*x263))+new_r11);
evalcond[6]=((((-1.0)*x266))+((cj13*new_r00))+((new_r10*sj13)));
evalcond[7]=((((-1.0)*x263*x264))+((cj13*x267))+new_r01);
evalcond[8]=(((cj13*x262))+new_r10+(((-1.0)*x264*x266)));
evalcond[9]=((((-1.0)*x262*x264))+(((-1.0)*cj13*x266))+new_r00);
evalcond[10]=((((-1.0)*new_r00*x268))+x263+(((-1.0)*new_r20*x265))+(((-1.0)*cj14*new_r10*x264)));
evalcond[11]=((((-1.0)*x262))+(((-1.0)*new_r01*x268))+(((-1.0)*new_r21*x265))+(((-1.0)*cj14*new_r11*x264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x269 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x269.valid){
continue;
}
CheckValue<IkReal> x270=IKPowWithIntegerCheck(IKsign(sj14),-1);
if(!x270.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x269.value)+(((1.5707963267949)*(x270.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
evalcond[0]=(((sj14*(IKsin(j15))))+new_r21);
evalcond[1]=((((-1.0)*sj14*(IKcos(j15))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[3];
j13eval[0]=sj14;
j13eval[1]=IKsign(sj14);
j13eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
j13eval[0]=new_r00;
j13eval[1]=sj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=0;
cj14=1.0;
j14=0;
IkReal x271=((1.0)*sj15);
IkReal x272=(((new_r10*new_r11))+((new_r00*new_r01)));
j13eval[0]=x272;
j13eval[1]=IKsign(x272);
j13eval[2]=((IKabs(((((-1.0)*new_r10*x271))+((new_r01*sj15)))))+(IKabs(((((-1.0)*new_r00*x271))+(((-1.0)*new_r11*x271))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=0;
cj14=1.0;
j14=0;
IkReal x273=((1.0)*sj15);
IkReal x274=((new_r01*new_r01)+(new_r11*new_r11));
j13eval[0]=x274;
j13eval[1]=((IKabs((((cj15*new_r01))+(((-1.0)*new_r11*x273)))))+(IKabs(((((-1.0)*cj15*new_r11))+(((-1.0)*new_r01*x273))))));
j13eval[2]=IKsign(x274);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=0;
cj14=1.0;
j14=0;
IkReal x275=(((cj15*new_r01))+((new_r11*sj15)));
j13eval[0]=x275;
j13eval[1]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj15*sj15)))))+(IKabs(((-1.0)+(new_r01*new_r01)+(cj15*cj15)))));
j13eval[2]=IKsign(x275);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x277 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x277)==0){
continue;
}
IkReal x276=pow(x277,-0.5);
CheckValue<IkReal> x278 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x278.valid){
continue;
}
IkReal gconst0=((-1.0)*(x278.value));
IkReal gconst1=((-1.0)*new_r01*x276);
IkReal gconst2=(new_r11*x276);
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x279.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
CheckValue<IkReal> x282 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x282.valid){
continue;
}
IkReal x280=((-1.0)*(x282.value));
IkReal x281=x276;
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x280;
IkReal gconst0=x280;
IkReal gconst1=((-1.0)*new_r01*x281);
IkReal gconst2=(new_r11*x281);
IkReal x283=new_r01*new_r01;
IkReal x284=(new_r00*new_r01);
IkReal x285=(((new_r10*new_r11))+x284);
IkReal x286=x276;
IkReal x287=(new_r01*x286);
j13eval[0]=x285;
j13eval[1]=((IKabs((((x284*x286))+((new_r11*x287)))))+(IKabs(((((-1.0)*x283*x286))+((new_r10*x287))))));
j13eval[2]=IKsign(x285);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
CheckValue<IkReal> x290 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x290.valid){
continue;
}
IkReal x288=((-1.0)*(x290.value));
IkReal x289=x276;
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x288;
IkReal gconst0=x288;
IkReal gconst1=((-1.0)*new_r01*x289);
IkReal gconst2=(new_r11*x289);
IkReal x291=((new_r01*new_r01)+(new_r11*new_r11));
j13eval[0]=x291;
j13eval[1]=IKsign(x291);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
IkReal x292=((-1.0)*(x294.value));
IkReal x293=x276;
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x292;
IkReal gconst0=x292;
IkReal gconst1=((-1.0)*new_r01*x293);
IkReal gconst2=(new_r11*x293);
IkReal x295=new_r01*new_r01;
IkReal x296=new_r11*new_r11;
IkReal x297=((1.0)*x295);
CheckValue<IkReal> x303=IKPowWithIntegerCheck((x295+x296),-1);
if(!x303.valid){
continue;
}
IkReal x298=x303.value;
CheckValue<IkReal> x304=IKPowWithIntegerCheck(((((-1.0)*x296))+(((-1.0)*x297))),-1);
if(!x304.valid){
continue;
}
IkReal x299=x304.value;
IkReal x300=((1.0)*x299);
IkReal x301=(new_r11*x300);
IkReal x302=(new_r01*x300);
j13eval[0]=((IKabs((((x298*(x296*x296)))+((x295*x296*x298))+(((-1.0)*x297*x298)))))+(IKabs(((((-1.0)*new_r01*x301*(new_r11*new_r11)))+(((-1.0)*x301*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x301))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
IkReal x305=((-1.0)*(x306.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x305;
new_r11=0;
new_r00=0;
IkReal gconst0=x305;
IkReal x307 = new_r01*new_r01;
if(IKabs(x307)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x307,-0.5)));
IkReal gconst2=0;
j13eval[0]=new_r10;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x309 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x309.valid){
continue;
}
IkReal x308=((-1.0)*(x309.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x308;
new_r11=0;
new_r00=0;
IkReal gconst0=x308;
IkReal x310 = new_r01*new_r01;
if(IKabs(x310)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x310,-0.5)));
IkReal gconst2=0;
j13eval[0]=new_r01;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x311=IKPowWithIntegerCheck(gconst1,-1);
if(!x311.valid){
continue;
}
cj13array[0]=((-1.0)*new_r01*(x311.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x312=IKsin(j13);
IkReal x313=IKcos(j13);
evalcond[0]=(gconst1*x312);
evalcond[1]=(new_r10*x312);
evalcond[2]=((-1.0)*new_r01*x312);
evalcond[3]=(gconst1+((new_r10*x313)));
evalcond[4]=(gconst1+((new_r01*x313)));
evalcond[5]=(new_r10+((gconst1*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x314=IKPowWithIntegerCheck(new_r01,-1);
if(!x314.valid){
continue;
}
cj13array[0]=((-1.0)*gconst1*(x314.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x315=IKsin(j13);
IkReal x316=IKcos(j13);
IkReal x317=(gconst1*x316);
evalcond[0]=(gconst1*x315);
evalcond[1]=(new_r10*x315);
evalcond[2]=((-1.0)*new_r01*x315);
evalcond[3]=(gconst1+((new_r10*x316)));
evalcond[4]=(x317+new_r01);
evalcond[5]=(x317+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x318=IKPowWithIntegerCheck(new_r10,-1);
if(!x318.valid){
continue;
}
cj13array[0]=((-1.0)*gconst1*(x318.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x319=IKsin(j13);
IkReal x320=IKcos(j13);
IkReal x321=(gconst1*x320);
evalcond[0]=(gconst1*x319);
evalcond[1]=(new_r10*x319);
evalcond[2]=((-1.0)*new_r01*x319);
evalcond[3]=(((new_r01*x320))+gconst1);
evalcond[4]=(x321+new_r01);
evalcond[5]=(x321+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst1;
evalcond[2]=gconst2;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
CheckValue<IkReal> x323 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x323.valid){
continue;
}
IkReal x322=((-1.0)*(x323.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x322;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x322;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j13eval[0]=-1.0;
j13eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j13eval[2]=-1.0;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
CheckValue<IkReal> x325 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x325.valid){
continue;
}
IkReal x324=((-1.0)*(x325.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x324;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x324;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j13eval[0]=-1.0;
j13eval[1]=-1.0;
j13eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
CheckValue<IkReal> x327 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x327.valid){
continue;
}
IkReal x326=((-1.0)*(x327.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x326;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x326;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j13eval[0]=1.0;
j13eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j13eval[2]=1.0;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x328=((1.0)*new_r11);
CheckValue<IkReal> x329 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x328)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x329.valid){
continue;
}
CheckValue<IkReal> x330=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x330.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x329.value)+(((1.5707963267949)*(x330.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x331=IKcos(j13);
IkReal x332=IKsin(j13);
IkReal x333=(gconst1*x331);
IkReal x334=((1.0)*x332);
IkReal x335=(gconst2*x331);
IkReal x336=(gconst2*x334);
evalcond[0]=(((new_r01*x331))+gconst1+((new_r11*x332)));
evalcond[1]=(((gconst1*x332))+x335+new_r11);
evalcond[2]=(x333+(((-1.0)*x336)));
evalcond[3]=(gconst2+((new_r11*x331))+(((-1.0)*new_r01*x334)));
evalcond[4]=(x333+(((-1.0)*x336))+new_r01);
evalcond[5]=((((-1.0)*gconst1*x334))+(((-1.0)*x335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x337=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338 = IKatan2WithCheck(IkReal((gconst1*new_r11)),IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x338.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x337.value)))+(x338.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x339=IKcos(j13);
IkReal x340=IKsin(j13);
IkReal x341=(gconst1*x339);
IkReal x342=((1.0)*x340);
IkReal x343=(gconst2*x339);
IkReal x344=(gconst2*x342);
evalcond[0]=(((new_r01*x339))+gconst1+((new_r11*x340)));
evalcond[1]=(x343+new_r11+((gconst1*x340)));
evalcond[2]=(x341+(((-1.0)*x344)));
evalcond[3]=(gconst2+((new_r11*x339))+(((-1.0)*new_r01*x342)));
evalcond[4]=(x341+new_r01+(((-1.0)*x344)));
evalcond[5]=((((-1.0)*gconst1*x342))+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346 = IKatan2WithCheck(IkReal((gconst1*gconst2)),IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x346.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x345.value)))+(x346.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x347=IKcos(j13);
IkReal x348=IKsin(j13);
IkReal x349=(gconst1*x347);
IkReal x350=((1.0)*x348);
IkReal x351=(gconst2*x347);
IkReal x352=(gconst2*x350);
evalcond[0]=(gconst1+((new_r11*x348))+((new_r01*x347)));
evalcond[1]=(x351+new_r11+((gconst1*x348)));
evalcond[2]=((((-1.0)*x352))+x349);
evalcond[3]=(gconst2+((new_r11*x347))+(((-1.0)*new_r01*x350)));
evalcond[4]=((((-1.0)*x352))+x349+new_r01);
evalcond[5]=((((-1.0)*x351))+(((-1.0)*gconst1*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x353=IKPowWithIntegerCheck(gconst2,-1);
if(!x353.valid){
continue;
}
cj13array[0]=(new_r00*(x353.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x354=IKsin(j13);
IkReal x355=IKcos(j13);
IkReal x356=((-1.0)*x354);
evalcond[0]=(new_r11*x354);
evalcond[1]=(new_r00*x356);
evalcond[2]=(gconst2*x356);
evalcond[3]=(gconst2+((new_r11*x355)));
evalcond[4]=(((gconst2*x355))+new_r11);
evalcond[5]=((((-1.0)*gconst2))+((new_r00*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
CheckValue<IkReal> x358 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x358.valid){
continue;
}
IkReal x357=((-1.0)*(x358.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x357;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x357;
IkReal gconst1=0;
IkReal x359 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x359)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x359,-0.5)));
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x361 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x361.valid){
continue;
}
IkReal x360=((-1.0)*(x361.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x360;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x360;
IkReal gconst1=0;
IkReal x362 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x362)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x362,-0.5)));
j13eval[0]=new_r11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
CheckValue<IkReal> x364 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x364.valid){
continue;
}
IkReal x363=((-1.0)*(x364.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x363;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x363;
IkReal gconst1=0;
IkReal x365 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x365)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x365,-0.5)));
j13eval[0]=new_r10;
j13eval[1]=new_r11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x366=IKPowWithIntegerCheck(new_r10,-1);
if(!x366.valid){
continue;
}
CheckValue<IkReal> x367=IKPowWithIntegerCheck(new_r11,-1);
if(!x367.valid){
continue;
}
if( IKabs((gconst2*(x366.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x367.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x366.value)))+IKsqr(((-1.0)*gconst2*(x367.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((gconst2*(x366.value)), ((-1.0)*gconst2*(x367.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x368=IKsin(j13);
IkReal x369=IKcos(j13);
IkReal x370=(gconst2*x369);
IkReal x371=(gconst2*x368);
evalcond[0]=(new_r10*x369);
evalcond[1]=(new_r11*x368);
evalcond[2]=((-1.0)*x371);
evalcond[3]=((-1.0)*x370);
evalcond[4]=(gconst2+((new_r11*x369)));
evalcond[5]=(x370+new_r11);
evalcond[6]=((((-1.0)*x371))+new_r10);
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x372=IKPowWithIntegerCheck(gconst2,-1);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373=IKPowWithIntegerCheck(new_r11,-1);
if(!x373.valid){
continue;
}
if( IKabs((new_r10*(x372.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x373.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x372.value)))+IKsqr(((-1.0)*gconst2*(x373.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((new_r10*(x372.value)), ((-1.0)*gconst2*(x373.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x374=IKsin(j13);
IkReal x375=IKcos(j13);
IkReal x376=(gconst2*x375);
IkReal x377=(gconst2*x374);
evalcond[0]=(new_r10*x375);
evalcond[1]=(new_r11*x374);
evalcond[2]=((-1.0)*x377);
evalcond[3]=((-1.0)*x376);
evalcond[4]=(gconst2+((new_r11*x375)));
evalcond[5]=(x376+new_r11);
evalcond[6]=((((-1.0)*x377))+new_r10);
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x378 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x378.valid){
continue;
}
CheckValue<IkReal> x379=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x379.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x378.value)+(((1.5707963267949)*(x379.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x380=IKsin(j13);
IkReal x381=IKcos(j13);
IkReal x382=(gconst2*x381);
IkReal x383=(gconst2*x380);
evalcond[0]=(new_r10*x381);
evalcond[1]=(new_r11*x380);
evalcond[2]=((-1.0)*x383);
evalcond[3]=((-1.0)*x382);
evalcond[4]=(gconst2+((new_r11*x381)));
evalcond[5]=(x382+new_r11);
evalcond[6]=((((-1.0)*x383))+new_r10);
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
CheckValue<IkReal> x385 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x385.valid){
continue;
}
IkReal x384=((-1.0)*(x385.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x384;
new_r01=0;
IkReal gconst0=x384;
IkReal gconst1=0;
IkReal x386 = new_r11*new_r11;
if(IKabs(x386)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x386,-0.5)));
j13eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x388 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x388.valid){
continue;
}
IkReal x387=((-1.0)*(x388.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x387;
new_r01=0;
IkReal gconst0=x387;
IkReal gconst1=0;
IkReal x389 = new_r11*new_r11;
if(IKabs(x389)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x389,-0.5)));
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x391 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x391.valid){
continue;
}
IkReal x390=((-1.0)*(x391.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst1;
cj15=gconst2;
j15=x390;
new_r01=0;
IkReal gconst0=x390;
IkReal gconst1=0;
IkReal x392 = new_r11*new_r11;
if(IKabs(x392)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x392,-0.5)));
j13eval[0]=new_r11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(gconst2,-1);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394=IKPowWithIntegerCheck(new_r11,-1);
if(!x394.valid){
continue;
}
if( IKabs((new_r10*(x393.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x394.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x393.value)))+IKsqr(((-1.0)*gconst2*(x394.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((new_r10*(x393.value)), ((-1.0)*gconst2*(x394.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x395=IKsin(j13);
IkReal x396=IKcos(j13);
IkReal x397=(gconst2*x396);
IkReal x398=(gconst2*x395);
evalcond[0]=(new_r11*x395);
evalcond[1]=((-1.0)*x398);
evalcond[2]=(((new_r11*x396))+gconst2);
evalcond[3]=(x397+new_r11);
evalcond[4]=((((-1.0)*x398))+new_r10);
evalcond[5]=((((-1.0)*x397))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x395))+((new_r10*x396)));
evalcond[7]=((((-1.0)*gconst2))+((new_r00*x396))+((new_r10*x395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
CheckValue<IkReal> x400=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x400.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x399.value)+(((1.5707963267949)*(x400.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x401=IKsin(j13);
IkReal x402=IKcos(j13);
IkReal x403=(gconst2*x402);
IkReal x404=(gconst2*x401);
evalcond[0]=(new_r11*x401);
evalcond[1]=((-1.0)*x404);
evalcond[2]=(gconst2+((new_r11*x402)));
evalcond[3]=(x403+new_r11);
evalcond[4]=(new_r10+(((-1.0)*x404)));
evalcond[5]=(new_r00+(((-1.0)*x403)));
evalcond[6]=((((-1.0)*new_r00*x401))+((new_r10*x402)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x401))+((new_r00*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x405=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x405.valid){
continue;
}
CheckValue<IkReal> x406 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x406.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x405.value)))+(x406.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x407=IKsin(j13);
IkReal x408=IKcos(j13);
IkReal x409=(gconst2*x408);
IkReal x410=(gconst2*x407);
evalcond[0]=(new_r11*x407);
evalcond[1]=((-1.0)*x410);
evalcond[2]=(gconst2+((new_r11*x408)));
evalcond[3]=(x409+new_r11);
evalcond[4]=(new_r10+(((-1.0)*x410)));
evalcond[5]=(new_r00+(((-1.0)*x409)));
evalcond[6]=((((-1.0)*new_r00*x407))+((new_r10*x408)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x407))+((new_r00*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x411=((1.0)*new_r11);
CheckValue<IkReal> x412=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*x411)))),-1);
if(!x412.valid){
continue;
}
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal((((gconst1*gconst2))+(((-1.0)*new_r01*x411)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst1*gconst1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x412.value)))+(x413.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x414=IKcos(j13);
IkReal x415=IKsin(j13);
IkReal x416=(gconst1*x414);
IkReal x417=((1.0)*x415);
IkReal x418=(gconst2*x414);
IkReal x419=(gconst2*x417);
evalcond[0]=(gconst1+((new_r11*x415))+((new_r01*x414)));
evalcond[1]=(((gconst1*x415))+x418+new_r11);
evalcond[2]=(gconst1+((new_r10*x414))+(((-1.0)*new_r00*x417)));
evalcond[3]=(gconst2+((new_r11*x414))+(((-1.0)*new_r01*x417)));
evalcond[4]=(x416+new_r01+(((-1.0)*x419)));
evalcond[5]=(x416+new_r10+(((-1.0)*x419)));
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x415))+((new_r00*x414)));
evalcond[7]=((((-1.0)*gconst1*x417))+new_r00+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x420=((1.0)*new_r11);
CheckValue<IkReal> x421 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x420)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x421.valid){
continue;
}
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x422.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x421.value)+(((1.5707963267949)*(x422.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x423=IKcos(j13);
IkReal x424=IKsin(j13);
IkReal x425=(gconst1*x423);
IkReal x426=((1.0)*x424);
IkReal x427=(gconst2*x423);
IkReal x428=(gconst2*x426);
evalcond[0]=(gconst1+((new_r11*x424))+((new_r01*x423)));
evalcond[1]=(((gconst1*x424))+x427+new_r11);
evalcond[2]=((((-1.0)*new_r00*x426))+gconst1+((new_r10*x423)));
evalcond[3]=(gconst2+((new_r11*x423))+(((-1.0)*new_r01*x426)));
evalcond[4]=((((-1.0)*x428))+x425+new_r01);
evalcond[5]=((((-1.0)*x428))+x425+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x424))+((new_r00*x423)));
evalcond[7]=((((-1.0)*x427))+(((-1.0)*gconst1*x426))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x429=((1.0)*gconst1);
CheckValue<IkReal> x430 = IKatan2WithCheck(IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x429)))),IkReal(((((-1.0)*new_r00*x429))+(((-1.0)*new_r11*x429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x431.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x430.value)+(((1.5707963267949)*(x431.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x432=IKcos(j13);
IkReal x433=IKsin(j13);
IkReal x434=(gconst1*x432);
IkReal x435=((1.0)*x433);
IkReal x436=(gconst2*x432);
IkReal x437=(gconst2*x435);
evalcond[0]=(((new_r01*x432))+gconst1+((new_r11*x433)));
evalcond[1]=(((gconst1*x433))+x436+new_r11);
evalcond[2]=((((-1.0)*new_r00*x435))+gconst1+((new_r10*x432)));
evalcond[3]=((((-1.0)*new_r01*x435))+gconst2+((new_r11*x432)));
evalcond[4]=((((-1.0)*x437))+x434+new_r01);
evalcond[5]=((((-1.0)*x437))+x434+new_r10);
evalcond[6]=(((new_r00*x432))+(((-1.0)*gconst2))+((new_r10*x433)));
evalcond[7]=((((-1.0)*x436))+new_r00+(((-1.0)*gconst1*x435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x439 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x439)==0){
continue;
}
IkReal x438=pow(x439,-0.5);
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x440.value))));
IkReal gconst4=((1.0)*new_r01*x438);
IkReal gconst5=((-1.0)*new_r11*x438);
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x441.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
CheckValue<IkReal> x444 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x444.valid){
continue;
}
IkReal x442=((1.0)*(x444.value));
IkReal x443=x438;
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x442)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x442)));
IkReal gconst4=((1.0)*new_r01*x443);
IkReal gconst5=((-1.0)*new_r11*x443);
IkReal x445=new_r01*new_r01;
IkReal x446=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x447=x438;
IkReal x448=((1.0)*new_r01*x447);
j13eval[0]=x446;
j13eval[1]=IKsign(x446);
j13eval[2]=((IKabs(((((-1.0)*new_r00*x448))+(((-1.0)*new_r11*x448)))))+(IKabs((((x445*x447))+(((-1.0)*new_r10*x448))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
CheckValue<IkReal> x451 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x451.valid){
continue;
}
IkReal x449=((1.0)*(x451.value));
IkReal x450=x438;
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x449)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x449)));
IkReal gconst4=((1.0)*new_r01*x450);
IkReal gconst5=((-1.0)*new_r11*x450);
IkReal x452=((new_r01*new_r01)+(new_r11*new_r11));
j13eval[0]=x452;
j13eval[1]=IKsign(x452);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x455 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x455.valid){
continue;
}
IkReal x453=((1.0)*(x455.value));
IkReal x454=x438;
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x453)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x453)));
IkReal gconst4=((1.0)*new_r01*x454);
IkReal gconst5=((-1.0)*new_r11*x454);
IkReal x456=new_r01*new_r01;
IkReal x457=new_r11*new_r11;
IkReal x458=((1.0)*x456);
CheckValue<IkReal> x464=IKPowWithIntegerCheck((x456+x457),-1);
if(!x464.valid){
continue;
}
IkReal x459=x464.value;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(((((-1.0)*x457))+(((-1.0)*x458))),-1);
if(!x465.valid){
continue;
}
IkReal x460=x465.value;
IkReal x461=((1.0)*x460);
IkReal x462=(new_r11*x461);
IkReal x463=(new_r01*x461);
j13eval[0]=((IKabs((((x459*(x457*x457)))+(((-1.0)*x458*x459))+((x456*x457*x459)))))+(IKabs(((((-1.0)*new_r01*x462))+(((-1.0)*x462*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x462*(new_r11*new_r11)))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
CheckValue<IkReal> x467 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x467.valid){
continue;
}
IkReal x466=((1.0)*(x467.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x466)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x466)));
IkReal x468 = new_r01*new_r01;
if(IKabs(x468)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x468,-0.5)));
IkReal gconst5=0;
j13eval[0]=new_r10;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
IkReal x469=((1.0)*(x470.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x469)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x469)));
IkReal x471 = new_r01*new_r01;
if(IKabs(x471)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x471,-0.5)));
IkReal gconst5=0;
j13eval[0]=new_r01;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x472=IKPowWithIntegerCheck(gconst4,-1);
if(!x472.valid){
continue;
}
cj13array[0]=((-1.0)*new_r01*(x472.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x473=IKsin(j13);
IkReal x474=IKcos(j13);
evalcond[0]=(gconst4*x473);
evalcond[1]=(new_r10*x473);
evalcond[2]=((-1.0)*new_r01*x473);
evalcond[3]=(((new_r10*x474))+gconst4);
evalcond[4]=(((new_r01*x474))+gconst4);
evalcond[5]=(((gconst4*x474))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x475=IKPowWithIntegerCheck(new_r01,-1);
if(!x475.valid){
continue;
}
cj13array[0]=((-1.0)*gconst4*(x475.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x476=IKsin(j13);
IkReal x477=IKcos(j13);
IkReal x478=(gconst4*x477);
evalcond[0]=(gconst4*x476);
evalcond[1]=(new_r10*x476);
evalcond[2]=((-1.0)*new_r01*x476);
evalcond[3]=(((new_r10*x477))+gconst4);
evalcond[4]=(x478+new_r01);
evalcond[5]=(x478+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x479=IKPowWithIntegerCheck(new_r10,-1);
if(!x479.valid){
continue;
}
cj13array[0]=((-1.0)*gconst4*(x479.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x480=IKsin(j13);
IkReal x481=IKcos(j13);
IkReal x482=(gconst4*x481);
evalcond[0]=(gconst4*x480);
evalcond[1]=(new_r10*x480);
evalcond[2]=((-1.0)*new_r01*x480);
evalcond[3]=(gconst4+((new_r01*x481)));
evalcond[4]=(x482+new_r01);
evalcond[5]=(x482+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst4;
evalcond[2]=gconst5;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[4];
CheckValue<IkReal> x484 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x484.valid){
continue;
}
IkReal x483=((1.0)*(x484.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x483)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x483)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j13eval[0]=1.0;
j13eval[1]=1.0;
j13eval[2]=new_r01;
j13eval[3]=1.0;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  || IKabs(j13eval[3]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
CheckValue<IkReal> x486 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x486.valid){
continue;
}
IkReal x485=((1.0)*(x486.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x485)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x485)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j13eval[0]=-1.0;
j13eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j13eval[2]=-1.0;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
IkReal x487=((1.0)*(x488.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x487)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x487)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j13eval[0]=1.0;
j13eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j13eval[2]=1.0;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x489=((1.0)*new_r11);
CheckValue<IkReal> x490 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x489)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
CheckValue<IkReal> x491=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x491.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x490.value)+(((1.5707963267949)*(x491.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x492=IKcos(j13);
IkReal x493=IKsin(j13);
IkReal x494=(gconst4*x492);
IkReal x495=(gconst4*x493);
IkReal x496=(gconst5*x492);
IkReal x497=((1.0)*x493);
IkReal x498=(gconst5*x497);
evalcond[0]=(gconst4+((new_r11*x493))+((new_r01*x492)));
evalcond[1]=(x496+x495+new_r11);
evalcond[2]=((((-1.0)*x498))+x494);
evalcond[3]=((((-1.0)*new_r01*x497))+gconst5+((new_r11*x492)));
evalcond[4]=((((-1.0)*x498))+x494+new_r01);
evalcond[5]=((((-1.0)*x495))+(((-1.0)*x496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x499 = IKatan2WithCheck(IkReal((gconst4*new_r11)),IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x499.valid){
continue;
}
CheckValue<IkReal> x500=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x500.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x499.value)+(((1.5707963267949)*(x500.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x501=IKcos(j13);
IkReal x502=IKsin(j13);
IkReal x503=(gconst4*x501);
IkReal x504=(gconst4*x502);
IkReal x505=(gconst5*x501);
IkReal x506=((1.0)*x502);
IkReal x507=(gconst5*x506);
evalcond[0]=(gconst4+((new_r11*x502))+((new_r01*x501)));
evalcond[1]=(x504+x505+new_r11);
evalcond[2]=((((-1.0)*x507))+x503);
evalcond[3]=((((-1.0)*new_r01*x506))+gconst5+((new_r11*x501)));
evalcond[4]=((((-1.0)*x507))+x503+new_r01);
evalcond[5]=((((-1.0)*x505))+(((-1.0)*x504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x508 = IKatan2WithCheck(IkReal((gconst4*gconst5)),IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x508.valid){
continue;
}
CheckValue<IkReal> x509=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x509.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x508.value)+(((1.5707963267949)*(x509.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x510=IKcos(j13);
IkReal x511=IKsin(j13);
IkReal x512=(gconst4*x510);
IkReal x513=(gconst4*x511);
IkReal x514=(gconst5*x510);
IkReal x515=((1.0)*x511);
IkReal x516=(gconst5*x515);
evalcond[0]=(((new_r01*x510))+((new_r11*x511))+gconst4);
evalcond[1]=(x514+x513+new_r11);
evalcond[2]=(x512+(((-1.0)*x516)));
evalcond[3]=(((new_r11*x510))+gconst5+(((-1.0)*new_r01*x515)));
evalcond[4]=(x512+new_r01+(((-1.0)*x516)));
evalcond[5]=((((-1.0)*x514))+(((-1.0)*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x517=IKPowWithIntegerCheck(gconst5,-1);
if(!x517.valid){
continue;
}
cj13array[0]=(new_r00*(x517.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x518=IKsin(j13);
IkReal x519=IKcos(j13);
IkReal x520=((-1.0)*x518);
evalcond[0]=(new_r11*x518);
evalcond[1]=(new_r00*x520);
evalcond[2]=(gconst5*x520);
evalcond[3]=(((new_r11*x519))+gconst5);
evalcond[4]=(new_r11+((gconst5*x519)));
evalcond[5]=(((new_r00*x519))+(((-1.0)*gconst5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
CheckValue<IkReal> x522 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x522.valid){
continue;
}
IkReal x521=((1.0)*(x522.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x521)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x521)));
IkReal gconst4=0;
IkReal x523 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x523)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x523,-0.5)));
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
IkReal x524=((1.0)*(x525.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x524)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x524)));
IkReal gconst4=0;
IkReal x526 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x526)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x526,-0.5)));
j13eval[0]=new_r11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
IkReal x527=((1.0)*(x528.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x527)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x527)));
IkReal gconst4=0;
IkReal x529 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x529)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x529,-0.5)));
j13eval[0]=new_r10;
j13eval[1]=new_r11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x530=IKPowWithIntegerCheck(new_r10,-1);
if(!x530.valid){
continue;
}
CheckValue<IkReal> x531=IKPowWithIntegerCheck(new_r11,-1);
if(!x531.valid){
continue;
}
if( IKabs((gconst5*(x530.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x531.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x530.value)))+IKsqr(((-1.0)*gconst5*(x531.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((gconst5*(x530.value)), ((-1.0)*gconst5*(x531.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x532=IKsin(j13);
IkReal x533=IKcos(j13);
IkReal x534=((1.0)*gconst5);
IkReal x535=((-1.0)*gconst5);
evalcond[0]=(new_r10*x533);
evalcond[1]=(new_r11*x532);
evalcond[2]=(x532*x535);
evalcond[3]=(x533*x535);
evalcond[4]=(gconst5+((new_r11*x533)));
evalcond[5]=(((gconst5*x533))+new_r11);
evalcond[6]=((((-1.0)*x532*x534))+new_r10);
evalcond[7]=((((-1.0)*x534))+((new_r10*x532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x536=IKPowWithIntegerCheck(gconst5,-1);
if(!x536.valid){
continue;
}
CheckValue<IkReal> x537=IKPowWithIntegerCheck(new_r11,-1);
if(!x537.valid){
continue;
}
if( IKabs((new_r10*(x536.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x537.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x536.value)))+IKsqr(((-1.0)*gconst5*(x537.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((new_r10*(x536.value)), ((-1.0)*gconst5*(x537.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x538=IKsin(j13);
IkReal x539=IKcos(j13);
IkReal x540=((1.0)*gconst5);
IkReal x541=((-1.0)*gconst5);
evalcond[0]=(new_r10*x539);
evalcond[1]=(new_r11*x538);
evalcond[2]=(x538*x541);
evalcond[3]=(x539*x541);
evalcond[4]=(gconst5+((new_r11*x539)));
evalcond[5]=(((gconst5*x539))+new_r11);
evalcond[6]=((((-1.0)*x538*x540))+new_r10);
evalcond[7]=(((new_r10*x538))+(((-1.0)*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x542 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x542.valid){
continue;
}
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x543.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x542.value)+(((1.5707963267949)*(x543.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x544=IKsin(j13);
IkReal x545=IKcos(j13);
IkReal x546=((1.0)*gconst5);
IkReal x547=((-1.0)*gconst5);
evalcond[0]=(new_r10*x545);
evalcond[1]=(new_r11*x544);
evalcond[2]=(x544*x547);
evalcond[3]=(x545*x547);
evalcond[4]=(gconst5+((new_r11*x545)));
evalcond[5]=(((gconst5*x545))+new_r11);
evalcond[6]=((((-1.0)*x544*x546))+new_r10);
evalcond[7]=(((new_r10*x544))+(((-1.0)*x546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x549.valid){
continue;
}
IkReal x548=((1.0)*(x549.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x548)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x548)));
IkReal gconst4=0;
IkReal x550 = new_r11*new_r11;
if(IKabs(x550)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x550,-0.5)));
j13eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
IkReal x551=((1.0)*(x552.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x551)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x551)));
IkReal gconst4=0;
IkReal x553 = new_r11*new_r11;
if(IKabs(x553)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x553,-0.5)));
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
IkReal x554=((1.0)*(x555.value));
sj14=0;
cj14=1.0;
j14=0;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x554)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x554)));
IkReal gconst4=0;
IkReal x556 = new_r11*new_r11;
if(IKabs(x556)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x556,-0.5)));
j13eval[0]=new_r11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x557=IKPowWithIntegerCheck(gconst5,-1);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558=IKPowWithIntegerCheck(new_r11,-1);
if(!x558.valid){
continue;
}
if( IKabs((new_r10*(x557.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x558.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x557.value)))+IKsqr(((-1.0)*gconst5*(x558.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((new_r10*(x557.value)), ((-1.0)*gconst5*(x558.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x559=IKsin(j13);
IkReal x560=IKcos(j13);
IkReal x561=((1.0)*gconst5);
evalcond[0]=(new_r11*x559);
evalcond[1]=((-1.0)*gconst5*x559);
evalcond[2]=(gconst5+((new_r11*x560)));
evalcond[3]=(((gconst5*x560))+new_r11);
evalcond[4]=((((-1.0)*x559*x561))+new_r10);
evalcond[5]=((((-1.0)*x560*x561))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x559))+((new_r10*x560)));
evalcond[7]=(((new_r10*x559))+((new_r00*x560))+(((-1.0)*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
CheckValue<IkReal> x563=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x563.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x562.value)+(((1.5707963267949)*(x563.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x564=IKsin(j13);
IkReal x565=IKcos(j13);
IkReal x566=((1.0)*gconst5);
evalcond[0]=(new_r11*x564);
evalcond[1]=((-1.0)*gconst5*x564);
evalcond[2]=(gconst5+((new_r11*x565)));
evalcond[3]=(((gconst5*x565))+new_r11);
evalcond[4]=((((-1.0)*x564*x566))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*x565*x566)));
evalcond[6]=((((-1.0)*new_r00*x564))+((new_r10*x565)));
evalcond[7]=(((new_r00*x565))+((new_r10*x564))+(((-1.0)*x566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x567 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x567.valid){
continue;
}
CheckValue<IkReal> x568=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x568.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x567.value)+(((1.5707963267949)*(x568.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x569=IKsin(j13);
IkReal x570=IKcos(j13);
IkReal x571=((1.0)*gconst5);
evalcond[0]=(new_r11*x569);
evalcond[1]=((-1.0)*gconst5*x569);
evalcond[2]=(((new_r11*x570))+gconst5);
evalcond[3]=(((gconst5*x570))+new_r11);
evalcond[4]=((((-1.0)*x569*x571))+new_r10);
evalcond[5]=((((-1.0)*x570*x571))+new_r00);
evalcond[6]=(((new_r10*x570))+(((-1.0)*new_r00*x569)));
evalcond[7]=(((new_r00*x570))+(((-1.0)*x571))+((new_r10*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x572=((1.0)*new_r11);
CheckValue<IkReal> x573 = IKatan2WithCheck(IkReal((((gconst4*gconst5))+(((-1.0)*new_r01*x572)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst4*gconst4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*x572)))),-1);
if(!x574.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x573.value)+(((1.5707963267949)*(x574.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x575=IKcos(j13);
IkReal x576=IKsin(j13);
IkReal x577=((1.0)*gconst5);
IkReal x578=(gconst4*x575);
IkReal x579=(gconst4*x576);
IkReal x580=((1.0)*x576);
IkReal x581=(x576*x577);
evalcond[0]=(((new_r11*x576))+((new_r01*x575))+gconst4);
evalcond[1]=(x579+((gconst5*x575))+new_r11);
evalcond[2]=(((new_r10*x575))+gconst4+(((-1.0)*new_r00*x580)));
evalcond[3]=((((-1.0)*new_r01*x580))+((new_r11*x575))+gconst5);
evalcond[4]=(x578+new_r01+(((-1.0)*x581)));
evalcond[5]=(x578+new_r10+(((-1.0)*x581)));
evalcond[6]=(((new_r00*x575))+((new_r10*x576))+(((-1.0)*x577)));
evalcond[7]=((((-1.0)*x579))+(((-1.0)*x575*x577))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x582=((1.0)*new_r11);
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x582)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x584.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x583.value)+(((1.5707963267949)*(x584.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x585=IKcos(j13);
IkReal x586=IKsin(j13);
IkReal x587=((1.0)*gconst5);
IkReal x588=(gconst4*x585);
IkReal x589=(gconst4*x586);
IkReal x590=((1.0)*x586);
IkReal x591=(x586*x587);
evalcond[0]=(gconst4+((new_r01*x585))+((new_r11*x586)));
evalcond[1]=(((gconst5*x585))+x589+new_r11);
evalcond[2]=((((-1.0)*new_r00*x590))+gconst4+((new_r10*x585)));
evalcond[3]=(gconst5+(((-1.0)*new_r01*x590))+((new_r11*x585)));
evalcond[4]=((((-1.0)*x591))+x588+new_r01);
evalcond[5]=((((-1.0)*x591))+x588+new_r10);
evalcond[6]=(((new_r00*x585))+(((-1.0)*x587))+((new_r10*x586)));
evalcond[7]=((((-1.0)*x589))+(((-1.0)*x585*x587))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x592=((1.0)*gconst4);
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal((((gconst4*new_r01))+(((-1.0)*new_r10*x592)))),IkReal(((((-1.0)*new_r00*x592))+(((-1.0)*new_r11*x592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
CheckValue<IkReal> x594=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x594.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x593.value)+(((1.5707963267949)*(x594.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x595=IKcos(j13);
IkReal x596=IKsin(j13);
IkReal x597=((1.0)*gconst5);
IkReal x598=(gconst4*x595);
IkReal x599=(gconst4*x596);
IkReal x600=((1.0)*x596);
IkReal x601=(x596*x597);
evalcond[0]=(((new_r11*x596))+gconst4+((new_r01*x595)));
evalcond[1]=(((gconst5*x595))+x599+new_r11);
evalcond[2]=(((new_r10*x595))+gconst4+(((-1.0)*new_r00*x600)));
evalcond[3]=(((new_r11*x595))+gconst5+(((-1.0)*new_r01*x600)));
evalcond[4]=(x598+(((-1.0)*x601))+new_r01);
evalcond[5]=(x598+(((-1.0)*x601))+new_r10);
evalcond[6]=(((new_r10*x596))+((new_r00*x595))+(((-1.0)*x597)));
evalcond[7]=((((-1.0)*x599))+(((-1.0)*x595*x597))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj14=0;
cj14=1.0;
j14=0;
new_r01=0;
new_r11=0;
j13eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
IkReal x602=x603.value;
j13array[0]=((-1.0)*x602);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x602)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j13))))+(((-1.0)*new_r00*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x604=IKcos(j13);
IkReal x605=IKsin(j13);
IkReal x606=((1.0)*x605);
evalcond[0]=(x604+new_r11);
evalcond[1]=((((-1.0)*x606))+new_r01);
evalcond[2]=((((-1.0)*x606))+new_r10);
evalcond[3]=((((-1.0)*x604))+new_r00);
evalcond[4]=(((new_r11*x605))+((new_r01*x604)));
evalcond[5]=(((new_r10*x604))+(((-1.0)*new_r00*x606)));
evalcond[6]=((-1.0)+((new_r10*x605))+((new_r00*x604)));
evalcond[7]=((1.0)+((new_r11*x604))+(((-1.0)*new_r01*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x607=IKsin(j13);
IkReal x608=IKcos(j13);
IkReal x609=((1.0)*x607);
evalcond[0]=(x607+new_r01);
evalcond[1]=(x607+new_r10);
evalcond[2]=(x608+new_r00);
evalcond[3]=((((-1.0)*x608))+new_r11);
evalcond[4]=(((new_r11*x607))+((new_r01*x608)));
evalcond[5]=(((new_r10*x608))+(((-1.0)*new_r00*x609)));
evalcond[6]=((1.0)+((new_r10*x607))+((new_r00*x608)));
evalcond[7]=((-1.0)+((new_r11*x608))+(((-1.0)*new_r01*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=0;
cj14=1.0;
j14=0;
new_r11=0;
new_r00=0;
j13eval[0]=new_r01;
j13eval[1]=((IKabs(sj15))+(IKabs(cj15)));
j13eval[2]=IKsign(new_r01);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=0;
cj14=1.0;
j14=0;
new_r11=0;
new_r00=0;
j13eval[0]=new_r10;
j13eval[1]=((IKabs(sj15))+(IKabs(cj15)));
j13eval[2]=IKsign(new_r10);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=0;
cj14=1.0;
j14=0;
new_r11=0;
new_r00=0;
j13eval[0]=new_r01;
j13eval[1]=new_r10;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x610=IKPowWithIntegerCheck(new_r01,-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611=IKPowWithIntegerCheck(new_r10,-1);
if(!x611.valid){
continue;
}
if( IKabs((cj15*(x610.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj15*(x611.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj15*(x610.value)))+IKsqr(((-1.0)*sj15*(x611.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((cj15*(x610.value)), ((-1.0)*sj15*(x611.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[7];
IkReal x612=IKcos(j13);
IkReal x613=IKsin(j13);
IkReal x614=(sj15*x612);
IkReal x615=((1.0)*x613);
IkReal x616=(cj15*x615);
evalcond[0]=(((new_r10*x612))+sj15);
evalcond[1]=(sj15+((new_r01*x612)));
evalcond[2]=(cj15+(((-1.0)*new_r01*x615)));
evalcond[3]=(((new_r10*x613))+(((-1.0)*cj15)));
evalcond[4]=(((sj15*x613))+((cj15*x612)));
evalcond[5]=((((-1.0)*x616))+x614+new_r01);
evalcond[6]=((((-1.0)*x616))+x614+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(cj15),IkReal(((-1.0)*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
CheckValue<IkReal> x618=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x618.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x617.value)+(((1.5707963267949)*(x618.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[7];
IkReal x619=IKcos(j13);
IkReal x620=IKsin(j13);
IkReal x621=(sj15*x619);
IkReal x622=((1.0)*x620);
IkReal x623=(cj15*x622);
evalcond[0]=(((new_r10*x619))+sj15);
evalcond[1]=(sj15+((new_r01*x619)));
evalcond[2]=((((-1.0)*new_r01*x622))+cj15);
evalcond[3]=(((new_r10*x620))+(((-1.0)*cj15)));
evalcond[4]=(((sj15*x620))+((cj15*x619)));
evalcond[5]=((((-1.0)*x623))+x621+new_r01);
evalcond[6]=((((-1.0)*x623))+x621+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal(cj15),IkReal(((-1.0)*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x625.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x624.value)+(((1.5707963267949)*(x625.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[7];
IkReal x626=IKcos(j13);
IkReal x627=IKsin(j13);
IkReal x628=(sj15*x626);
IkReal x629=((1.0)*x627);
IkReal x630=(cj15*x629);
evalcond[0]=(sj15+((new_r10*x626)));
evalcond[1]=(((new_r01*x626))+sj15);
evalcond[2]=((((-1.0)*new_r01*x629))+cj15);
evalcond[3]=(((new_r10*x627))+(((-1.0)*cj15)));
evalcond[4]=(((sj15*x627))+((cj15*x626)));
evalcond[5]=((((-1.0)*x630))+x628+new_r01);
evalcond[6]=((((-1.0)*x630))+x628+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj14=0;
cj14=1.0;
j14=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j13eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
IkReal x631=x632.value;
j13array[0]=((-1.0)*x631);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x631)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j13))))+(((-1.0)*new_r00*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj14=0;
cj14=1.0;
j14=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
IkReal x633=x634.value;
j13array[0]=((-1.0)*x633);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x633)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j13))))+(((-1.0)*new_r01*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=0;
cj14=1.0;
j14=0;
new_r01=0;
new_r10=0;
j13eval[0]=new_r11;
j13eval[1]=((IKabs(sj15))+(IKabs(cj15)));
j13eval[2]=IKsign(new_r11);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=0;
cj14=1.0;
j14=0;
new_r01=0;
new_r10=0;
j13eval[0]=new_r00;
j13eval[1]=new_r11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=0;
cj14=1.0;
j14=0;
new_r01=0;
new_r10=0;
j13eval[0]=new_r11;
j13eval[1]=sj15;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
cj13array[0]=new_r00;
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x635=IKsin(j13);
IkReal x636=IKcos(j13);
IkReal x637=((-1.0)*x635);
evalcond[0]=(new_r11*x635);
evalcond[1]=(x636+new_r11);
evalcond[2]=x637;
evalcond[3]=(new_r00*x637);
evalcond[4]=((1.0)+((new_r11*x636)));
evalcond[5]=((-1.0)+((new_r00*x636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
cj13array[0]=new_r11;
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x638=IKsin(j13);
IkReal x639=IKcos(j13);
evalcond[0]=x638;
evalcond[1]=(new_r11*x638);
evalcond[2]=(x639+new_r00);
evalcond[3]=((-1.0)*new_r00*x638);
evalcond[4]=((-1.0)+((new_r11*x639)));
evalcond[5]=((1.0)+((new_r00*x639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x641=IKPowWithIntegerCheck(new_r11,-1);
if(!x641.valid){
continue;
}
IkReal x640=x641.value;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(sj15,-1);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(x640,-2);
if(!x643.valid){
continue;
}
if( IKabs((x640*(x642.value)*(((((-1.0)*(x643.value)))+(cj15*cj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj15*x640)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x640*(x642.value)*(((((-1.0)*(x643.value)))+(cj15*cj15)))))+IKsqr(((-1.0)*cj15*x640))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((x640*(x642.value)*(((((-1.0)*(x643.value)))+(cj15*cj15)))), ((-1.0)*cj15*x640));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[7];
IkReal x644=IKsin(j13);
IkReal x645=IKcos(j13);
IkReal x646=((1.0)*cj15);
IkReal x647=((1.0)*x644);
evalcond[0]=(((new_r11*x645))+cj15);
evalcond[1]=(((new_r11*x644))+sj15);
evalcond[2]=(sj15+(((-1.0)*new_r00*x647)));
evalcond[3]=((((-1.0)*x646))+((new_r00*x645)));
evalcond[4]=(((sj15*x644))+new_r11+((cj15*x645)));
evalcond[5]=((((-1.0)*x644*x646))+((sj15*x645)));
evalcond[6]=((((-1.0)*sj15*x647))+(((-1.0)*x645*x646))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x648=IKPowWithIntegerCheck(new_r00,-1);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(new_r11,-1);
if(!x649.valid){
continue;
}
if( IKabs((sj15*(x648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj15*(x649.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj15*(x648.value)))+IKsqr(((-1.0)*cj15*(x649.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((sj15*(x648.value)), ((-1.0)*cj15*(x649.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[7];
IkReal x650=IKsin(j13);
IkReal x651=IKcos(j13);
IkReal x652=((1.0)*cj15);
IkReal x653=((1.0)*x650);
evalcond[0]=(cj15+((new_r11*x651)));
evalcond[1]=(sj15+((new_r11*x650)));
evalcond[2]=((((-1.0)*new_r00*x653))+sj15);
evalcond[3]=((((-1.0)*x652))+((new_r00*x651)));
evalcond[4]=(((sj15*x650))+((cj15*x651))+new_r11);
evalcond[5]=(((sj15*x651))+(((-1.0)*x650*x652)));
evalcond[6]=((((-1.0)*x651*x652))+(((-1.0)*sj15*x653))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x654=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(((-1.0)*sj15)),IkReal(((-1.0)*cj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x654.value)))+(x655.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[7];
IkReal x656=IKsin(j13);
IkReal x657=IKcos(j13);
IkReal x658=((1.0)*cj15);
IkReal x659=((1.0)*x656);
evalcond[0]=(cj15+((new_r11*x657)));
evalcond[1]=(sj15+((new_r11*x656)));
evalcond[2]=((((-1.0)*new_r00*x659))+sj15);
evalcond[3]=((((-1.0)*x658))+((new_r00*x657)));
evalcond[4]=(((sj15*x656))+((cj15*x657))+new_r11);
evalcond[5]=((((-1.0)*x656*x658))+((sj15*x657)));
evalcond[6]=((((-1.0)*x657*x658))+(((-1.0)*sj15*x659))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x660=IKPowWithIntegerCheck(IKsign((((cj15*new_r01))+((new_r11*sj15)))),-1);
if(!x660.valid){
continue;
}
CheckValue<IkReal> x661 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj15*cj15))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj15*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x661.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x660.value)))+(x661.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x662=IKcos(j13);
IkReal x663=IKsin(j13);
IkReal x664=((1.0)*cj15);
IkReal x665=(sj15*x662);
IkReal x666=((1.0)*x663);
IkReal x667=(x663*x664);
evalcond[0]=(((new_r11*x663))+sj15+((new_r01*x662)));
evalcond[1]=(((sj15*x663))+new_r11+((cj15*x662)));
evalcond[2]=(sj15+((new_r10*x662))+(((-1.0)*new_r00*x666)));
evalcond[3]=(((new_r11*x662))+cj15+(((-1.0)*new_r01*x666)));
evalcond[4]=((((-1.0)*x667))+x665+new_r01);
evalcond[5]=((((-1.0)*x667))+x665+new_r10);
evalcond[6]=(((new_r10*x663))+(((-1.0)*x664))+((new_r00*x662)));
evalcond[7]=((((-1.0)*x662*x664))+(((-1.0)*sj15*x666))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x668=((1.0)*sj15);
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x668))+((cj15*new_r01)))),IkReal(((((-1.0)*cj15*new_r11))+(((-1.0)*new_r01*x668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
CheckValue<IkReal> x670=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x670.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x669.value)+(((1.5707963267949)*(x670.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x671=IKcos(j13);
IkReal x672=IKsin(j13);
IkReal x673=((1.0)*cj15);
IkReal x674=(sj15*x671);
IkReal x675=((1.0)*x672);
IkReal x676=(x672*x673);
evalcond[0]=(((new_r11*x672))+((new_r01*x671))+sj15);
evalcond[1]=(((sj15*x672))+((cj15*x671))+new_r11);
evalcond[2]=(((new_r10*x671))+(((-1.0)*new_r00*x675))+sj15);
evalcond[3]=(((new_r11*x671))+(((-1.0)*new_r01*x675))+cj15);
evalcond[4]=(x674+new_r01+(((-1.0)*x676)));
evalcond[5]=(x674+new_r10+(((-1.0)*x676)));
evalcond[6]=(((new_r00*x671))+((new_r10*x672))+(((-1.0)*x673)));
evalcond[7]=((((-1.0)*sj15*x675))+(((-1.0)*x671*x673))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x677=((1.0)*sj15);
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal((((new_r01*sj15))+(((-1.0)*new_r10*x677)))),IkReal(((((-1.0)*new_r00*x677))+(((-1.0)*new_r11*x677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
CheckValue<IkReal> x679=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x679.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x678.value)+(((1.5707963267949)*(x679.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x680=IKcos(j13);
IkReal x681=IKsin(j13);
IkReal x682=((1.0)*cj15);
IkReal x683=(sj15*x680);
IkReal x684=((1.0)*x681);
IkReal x685=(x681*x682);
evalcond[0]=(sj15+((new_r01*x680))+((new_r11*x681)));
evalcond[1]=(((sj15*x681))+((cj15*x680))+new_r11);
evalcond[2]=(sj15+((new_r10*x680))+(((-1.0)*new_r00*x684)));
evalcond[3]=((((-1.0)*new_r01*x684))+cj15+((new_r11*x680)));
evalcond[4]=((((-1.0)*x685))+x683+new_r01);
evalcond[5]=((((-1.0)*x685))+x683+new_r10);
evalcond[6]=((((-1.0)*x682))+((new_r00*x680))+((new_r10*x681)));
evalcond[7]=((((-1.0)*x680*x682))+(((-1.0)*sj15*x684))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
IkReal x686=((1.0)*cj15);
IkReal x687=((new_r10*new_r10)+(new_r00*new_r00));
j13eval[0]=x687;
j13eval[1]=((IKabs(((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x686)))))+(IKabs(((((-1.0)*new_r10*x686))+((new_r00*sj15))))));
j13eval[2]=IKsign(x687);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
IkReal x688=((1.0)*cj15);
IkReal x689=(((new_r10*new_r11))+((new_r00*new_r01)));
j13eval[0]=x689;
j13eval[1]=((IKabs(((((-1.0)*new_r10*x688))+(((-1.0)*new_r01*x688)))))+(IKabs((((cj15*new_r00))+(((-1.0)*new_r11*x688))))));
j13eval[2]=IKsign(x689);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
IkReal x690=((1.0)*new_r10);
IkReal x691=(((cj15*new_r00))+(((-1.0)*sj15*x690)));
j13eval[0]=x691;
j13eval[1]=((IKabs(((new_r10*new_r10)+(((-1.0)*(cj15*cj15))))))+(IKabs((((cj15*sj15))+(((-1.0)*new_r00*x690))))));
j13eval[2]=IKsign(x691);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x694 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x694)==0){
continue;
}
IkReal x692=pow(x694,-0.5);
IkReal x693=((-1.0)*x692);
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
IkReal gconst6=((-1.0)*(x695.value));
IkReal gconst7=(new_r00*x693);
IkReal gconst8=(new_r10*x693);
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x696.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[2];
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
IkReal x697=((-1.0)*(x700.value));
IkReal x698=x692;
IkReal x699=((-1.0)*x698);
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
sj15=gconst7;
cj15=gconst8;
j15=x697;
IkReal gconst6=x697;
IkReal gconst7=(new_r00*x699);
IkReal gconst8=(new_r10*x699);
IkReal x701=((new_r10*new_r10)+(new_r00*new_r00));
j13eval[0]=x701;
j13eval[1]=IKsign(x701);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
CheckValue<IkReal> x705 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x705.valid){
continue;
}
IkReal x702=((-1.0)*(x705.value));
IkReal x703=x692;
IkReal x704=((-1.0)*x703);
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
sj15=gconst7;
cj15=gconst8;
j15=x702;
IkReal gconst6=x702;
IkReal gconst7=(new_r00*x704);
IkReal gconst8=(new_r10*x704);
IkReal x706=new_r10*new_r10;
IkReal x707=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x708=x692;
IkReal x709=(new_r10*x708);
j13eval[0]=x707;
j13eval[1]=IKsign(x707);
j13eval[2]=((IKabs(((((-1.0)*new_r00*x709))+((new_r11*x709)))))+(IKabs((((x706*x708))+((new_r01*x709))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
IkReal x710=((-1.0)*(x713.value));
IkReal x711=x692;
IkReal x712=((-1.0)*x711);
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
sj15=gconst7;
cj15=gconst8;
j15=x710;
IkReal gconst6=x710;
IkReal gconst7=(new_r00*x712);
IkReal gconst8=(new_r10*x712);
IkReal x714=new_r10*new_r10;
IkReal x715=new_r11*new_r11;
IkReal x716=new_r00*new_r00;
j13eval[0]=(x714+x716);
j13eval[1]=(((x715*(x714*x714)))+(((2.0)*x714*x715*x716))+((x715*(x716*x716)))+x714);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x717=IKPowWithIntegerCheck(IKsign((((gconst8*new_r10))+((gconst7*new_r00)))),-1);
if(!x717.valid){
continue;
}
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst8*gconst8)))+((new_r00*new_r11)))),IkReal(((((-1.0)*gconst7*gconst8))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x717.value)))+(x718.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x719=IKsin(j13);
IkReal x720=IKcos(j13);
IkReal x721=(gconst8*x720);
IkReal x722=((1.0)*x719);
IkReal x723=(gconst7*x720);
IkReal x724=(gconst7*x722);
evalcond[0]=(gconst8+((new_r00*x720))+((new_r10*x719)));
evalcond[1]=(((gconst8*x719))+x723+new_r10);
evalcond[2]=(gconst7+(((-1.0)*new_r00*x722))+((new_r10*x720)));
evalcond[3]=(gconst8+((new_r11*x720))+(((-1.0)*new_r01*x722)));
evalcond[4]=((((-1.0)*x724))+x721+new_r11);
evalcond[5]=((((-1.0)*x724))+x721+new_r00);
evalcond[6]=((((-1.0)*gconst7))+((new_r01*x720))+((new_r11*x719)));
evalcond[7]=((((-1.0)*gconst8*x722))+(((-1.0)*x723))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x725=((1.0)*gconst8);
CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal((((gconst8*new_r00))+(((-1.0)*new_r11*x725)))),IkReal(((((-1.0)*new_r01*x725))+(((-1.0)*new_r10*x725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
CheckValue<IkReal> x727=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x727.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x726.value)+(((1.5707963267949)*(x727.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x728=IKsin(j13);
IkReal x729=IKcos(j13);
IkReal x730=(gconst8*x729);
IkReal x731=((1.0)*x728);
IkReal x732=(gconst7*x729);
IkReal x733=(gconst7*x731);
evalcond[0]=(gconst8+((new_r00*x729))+((new_r10*x728)));
evalcond[1]=(((gconst8*x728))+x732+new_r10);
evalcond[2]=(gconst7+(((-1.0)*new_r00*x731))+((new_r10*x729)));
evalcond[3]=(gconst8+(((-1.0)*new_r01*x731))+((new_r11*x729)));
evalcond[4]=((((-1.0)*x733))+x730+new_r11);
evalcond[5]=((((-1.0)*x733))+x730+new_r00);
evalcond[6]=((((-1.0)*gconst7))+((new_r01*x729))+((new_r11*x728)));
evalcond[7]=((((-1.0)*gconst8*x731))+(((-1.0)*x732))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x734=((1.0)*gconst8);
CheckValue<IkReal> x735=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x735.valid){
continue;
}
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal((((gconst7*new_r00))+(((-1.0)*new_r10*x734)))),IkReal(((((-1.0)*gconst7*new_r10))+(((-1.0)*new_r00*x734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x735.value)))+(x736.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x737=IKsin(j13);
IkReal x738=IKcos(j13);
IkReal x739=(gconst8*x738);
IkReal x740=((1.0)*x737);
IkReal x741=(gconst7*x738);
IkReal x742=(gconst7*x740);
evalcond[0]=(gconst8+((new_r00*x738))+((new_r10*x737)));
evalcond[1]=(((gconst8*x737))+x741+new_r10);
evalcond[2]=((((-1.0)*new_r00*x740))+gconst7+((new_r10*x738)));
evalcond[3]=((((-1.0)*new_r01*x740))+gconst8+((new_r11*x738)));
evalcond[4]=(x739+new_r11+(((-1.0)*x742)));
evalcond[5]=(x739+new_r00+(((-1.0)*x742)));
evalcond[6]=(((new_r01*x738))+(((-1.0)*gconst7))+((new_r11*x737)));
evalcond[7]=((((-1.0)*gconst8*x740))+(((-1.0)*x741))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x745 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x745)==0){
continue;
}
IkReal x743=pow(x745,-0.5);
IkReal x744=((1.0)*x743);
CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x746.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x746.value))));
IkReal gconst10=(new_r00*x744);
IkReal gconst11=(new_r10*x744);
CheckValue<IkReal> x747 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x747.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x747.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[2];
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
IkReal x748=((1.0)*(x751.value));
IkReal x749=x743;
IkReal x750=((1.0)*x749);
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x748)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x748)));
IkReal gconst10=(new_r00*x750);
IkReal gconst11=(new_r10*x750);
IkReal x752=((new_r10*new_r10)+(new_r00*new_r00));
j13eval[0]=x752;
j13eval[1]=IKsign(x752);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
IkReal x753=((1.0)*(x756.value));
IkReal x754=x743;
IkReal x755=((1.0)*x754);
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x753)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x753)));
IkReal gconst10=(new_r00*x755);
IkReal gconst11=(new_r10*x755);
IkReal x757=new_r10*new_r10;
IkReal x758=(new_r10*new_r11);
IkReal x759=(((new_r00*new_r01))+x758);
IkReal x760=x743;
IkReal x761=((1.0)*x760);
j13eval[0]=x759;
j13eval[1]=IKsign(x759);
j13eval[2]=((IKabs(((((-1.0)*x757*x761))+(((-1.0)*new_r01*new_r10*x761)))))+(IKabs(((((-1.0)*x758*x761))+((new_r00*new_r10*x760))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst11*gconst11)))+((new_r00*new_r11)))),IkReal(((((-1.0)*gconst10*gconst11))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
CheckValue<IkReal> x763=IKPowWithIntegerCheck(IKsign((((gconst10*new_r00))+((gconst11*new_r10)))),-1);
if(!x763.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x762.value)+(((1.5707963267949)*(x763.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x764=IKcos(j13);
IkReal x765=IKsin(j13);
IkReal x766=(gconst11*x764);
IkReal x767=((1.0)*x765);
IkReal x768=(gconst10*x764);
IkReal x769=(gconst10*x767);
evalcond[0]=(((new_r10*x765))+gconst11+((new_r00*x764)));
evalcond[1]=(x768+new_r10+((gconst11*x765)));
evalcond[2]=(((new_r10*x764))+(((-1.0)*new_r00*x767))+gconst10);
evalcond[3]=(((new_r11*x764))+gconst11+(((-1.0)*new_r01*x767)));
evalcond[4]=((((-1.0)*x769))+x766+new_r11);
evalcond[5]=((((-1.0)*x769))+x766+new_r00);
evalcond[6]=(((new_r11*x765))+((new_r01*x764))+(((-1.0)*gconst10)));
evalcond[7]=((((-1.0)*gconst11*x767))+(((-1.0)*x768))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x770=((1.0)*gconst11);
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal((((gconst11*new_r00))+(((-1.0)*new_r11*x770)))),IkReal(((((-1.0)*new_r01*x770))+(((-1.0)*new_r10*x770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
CheckValue<IkReal> x772=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x772.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x771.value)+(((1.5707963267949)*(x772.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x773=IKcos(j13);
IkReal x774=IKsin(j13);
IkReal x775=(gconst11*x773);
IkReal x776=((1.0)*x774);
IkReal x777=(gconst10*x773);
IkReal x778=(gconst10*x776);
evalcond[0]=(gconst11+((new_r00*x773))+((new_r10*x774)));
evalcond[1]=(((gconst11*x774))+x777+new_r10);
evalcond[2]=((((-1.0)*new_r00*x776))+gconst10+((new_r10*x773)));
evalcond[3]=((((-1.0)*new_r01*x776))+gconst11+((new_r11*x773)));
evalcond[4]=(x775+(((-1.0)*x778))+new_r11);
evalcond[5]=(x775+(((-1.0)*x778))+new_r00);
evalcond[6]=(((new_r11*x774))+((new_r01*x773))+(((-1.0)*gconst10)));
evalcond[7]=((((-1.0)*gconst11*x776))+new_r01+(((-1.0)*x777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x779=((1.0)*new_r10);
CheckValue<IkReal> x780=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x780.valid){
continue;
}
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*x779))+((gconst10*new_r00)))),IkReal(((((-1.0)*gconst10*x779))+(((-1.0)*gconst11*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x780.value)))+(x781.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x782=IKcos(j13);
IkReal x783=IKsin(j13);
IkReal x784=(gconst11*x782);
IkReal x785=((1.0)*x783);
IkReal x786=(gconst10*x782);
IkReal x787=(gconst10*x785);
evalcond[0]=(((new_r10*x783))+gconst11+((new_r00*x782)));
evalcond[1]=(((gconst11*x783))+x786+new_r10);
evalcond[2]=(((new_r10*x782))+gconst10+(((-1.0)*new_r00*x785)));
evalcond[3]=((((-1.0)*new_r01*x785))+((new_r11*x782))+gconst11);
evalcond[4]=((((-1.0)*x787))+x784+new_r11);
evalcond[5]=((((-1.0)*x787))+x784+new_r00);
evalcond[6]=(((new_r11*x783))+((new_r01*x782))+(((-1.0)*gconst10)));
evalcond[7]=((((-1.0)*gconst11*x785))+(((-1.0)*x786))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x788=IKcos(j13);
IkReal x789=IKsin(j13);
IkReal x790=((1.0)*x789);
evalcond[0]=(x788+new_r10);
evalcond[1]=((((-1.0)*x790))+new_r11);
evalcond[2]=((((-1.0)*x788))+new_r01);
evalcond[3]=((((-1.0)*x790))+new_r00);
evalcond[4]=(((new_r10*x789))+((new_r00*x788)));
evalcond[5]=((((-1.0)*new_r01*x790))+((new_r11*x788)));
evalcond[6]=((-1.0)+((new_r11*x789))+((new_r01*x788)));
evalcond[7]=((1.0)+((new_r10*x788))+(((-1.0)*new_r00*x790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x791=IKsin(j13);
IkReal x792=IKcos(j13);
IkReal x793=((1.0)*x791);
evalcond[0]=(x791+new_r11);
evalcond[1]=(x792+new_r01);
evalcond[2]=(x791+new_r00);
evalcond[3]=((((-1.0)*x792))+new_r10);
evalcond[4]=(((new_r10*x791))+((new_r00*x792)));
evalcond[5]=((((-1.0)*new_r01*x793))+((new_r11*x792)));
evalcond[6]=((1.0)+((new_r11*x791))+((new_r01*x792)));
evalcond[7]=((-1.0)+((new_r10*x792))+(((-1.0)*new_r00*x793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
new_r10=0;
new_r00=0;
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
IkReal x794=x795.value;
j13array[0]=((-1.0)*x794);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x794)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j13))))+(((-1.0)*new_r01*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x797 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x797.valid){
continue;
}
IkReal x796=x797.value;
j13array[0]=((-1.0)*x796);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x796)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j13))))+(((-1.0)*new_r01*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x798=((1.0)*new_r10);
CheckValue<IkReal> x799 = IKatan2WithCheck(IkReal((((cj15*sj15))+(((-1.0)*new_r00*x798)))),IkReal(((new_r10*new_r10)+(((-1.0)*(cj15*cj15))))),IKFAST_ATAN2_MAGTHRESH);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800=IKPowWithIntegerCheck(IKsign((((cj15*new_r00))+(((-1.0)*sj15*x798)))),-1);
if(!x800.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x799.value)+(((1.5707963267949)*(x800.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x801=IKcos(j13);
IkReal x802=IKsin(j13);
IkReal x803=((1.0)*sj15);
IkReal x804=(cj15*x801);
IkReal x805=((1.0)*x802);
IkReal x806=(x802*x803);
evalcond[0]=(cj15+((new_r00*x801))+((new_r10*x802)));
evalcond[1]=(((sj15*x801))+new_r10+((cj15*x802)));
evalcond[2]=((((-1.0)*new_r00*x805))+sj15+((new_r10*x801)));
evalcond[3]=((((-1.0)*new_r01*x805))+cj15+((new_r11*x801)));
evalcond[4]=(new_r11+x804+(((-1.0)*x806)));
evalcond[5]=(new_r00+x804+(((-1.0)*x806)));
evalcond[6]=(((new_r11*x802))+((new_r01*x801))+(((-1.0)*x803)));
evalcond[7]=((((-1.0)*cj15*x805))+new_r01+(((-1.0)*x801*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x807=((1.0)*cj15);
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal((((cj15*new_r00))+(((-1.0)*new_r11*x807)))),IkReal(((((-1.0)*new_r01*x807))+(((-1.0)*new_r10*x807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x809.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x808.value)+(((1.5707963267949)*(x809.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x810=IKcos(j13);
IkReal x811=IKsin(j13);
IkReal x812=((1.0)*sj15);
IkReal x813=(cj15*x810);
IkReal x814=((1.0)*x811);
IkReal x815=(x811*x812);
evalcond[0]=(((new_r00*x810))+((new_r10*x811))+cj15);
evalcond[1]=(((cj15*x811))+new_r10+((sj15*x810)));
evalcond[2]=(((new_r10*x810))+sj15+(((-1.0)*new_r00*x814)));
evalcond[3]=(((new_r11*x810))+cj15+(((-1.0)*new_r01*x814)));
evalcond[4]=((((-1.0)*x815))+new_r11+x813);
evalcond[5]=((((-1.0)*x815))+new_r00+x813);
evalcond[6]=(((new_r11*x811))+((new_r01*x810))+(((-1.0)*x812)));
evalcond[7]=((((-1.0)*x810*x812))+new_r01+(((-1.0)*cj15*x814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x816=((1.0)*cj15);
CheckValue<IkReal> x817=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x817.valid){
continue;
}
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x816))+((new_r00*sj15)))),IkReal(((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x817.value)))+(x818.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x819=IKcos(j13);
IkReal x820=IKsin(j13);
IkReal x821=((1.0)*sj15);
IkReal x822=(cj15*x819);
IkReal x823=((1.0)*x820);
IkReal x824=(x820*x821);
evalcond[0]=(((new_r00*x819))+((new_r10*x820))+cj15);
evalcond[1]=(((cj15*x820))+new_r10+((sj15*x819)));
evalcond[2]=(((new_r10*x819))+(((-1.0)*new_r00*x823))+sj15);
evalcond[3]=(((new_r11*x819))+cj15+(((-1.0)*new_r01*x823)));
evalcond[4]=((((-1.0)*x824))+new_r11+x822);
evalcond[5]=((((-1.0)*x824))+new_r00+x822);
evalcond[6]=(((new_r01*x819))+(((-1.0)*x821))+((new_r11*x820)));
evalcond[7]=((((-1.0)*x819*x821))+(((-1.0)*cj15*x823))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j13eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j13eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j13eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x826 = IKatan2WithCheck(IkReal((new_r00*new_r22)),IkReal((new_r10*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x826.valid){
continue;
}
IkReal x825=x826.value;
j13array[0]=((-1.0)*x825);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x825)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x827=IKcos(j13);
IkReal x828=IKsin(j13);
IkReal x829=((1.0)*x828);
IkReal x830=(new_r01*x827);
IkReal x831=(new_r11*x828);
evalcond[0]=(x830+x831);
evalcond[1]=(((new_r10*x828))+((new_r00*x827)));
evalcond[2]=(((new_r10*x827))+(((-1.0)*new_r00*x829)));
evalcond[3]=(((new_r11*x827))+(((-1.0)*new_r01*x829)));
evalcond[4]=(((new_r22*x831))+((new_r22*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
IkReal x832=x833.value;
j13array[0]=((-1.0)*x832);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x832)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x834=IKcos(j13);
IkReal x835=IKsin(j13);
IkReal x836=((1.0)*x835);
IkReal x837=(new_r01*x834);
IkReal x838=(new_r22*x835);
evalcond[0]=(((new_r11*x835))+x837);
evalcond[1]=((((-1.0)*new_r00*x836))+((new_r10*x834)));
evalcond[2]=(((new_r11*x834))+(((-1.0)*new_r01*x836)));
evalcond[3]=(((new_r00*new_r22*x834))+((new_r10*x838)));
evalcond[4]=(((new_r11*x838))+((new_r22*x837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x840 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x840.valid){
continue;
}
IkReal x839=x840.value;
j13array[0]=((-1.0)*x839);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x839)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x841=IKcos(j13);
IkReal x842=IKsin(j13);
IkReal x843=((1.0)*x842);
IkReal x844=(new_r22*x842);
IkReal x845=(new_r22*x841);
evalcond[0]=(((new_r10*x842))+((new_r00*x841)));
evalcond[1]=(((new_r10*x841))+(((-1.0)*new_r00*x843)));
evalcond[2]=((((-1.0)*new_r01*x843))+((new_r11*x841)));
evalcond[3]=(((new_r10*x844))+((new_r00*x845)));
evalcond[4]=(((new_r01*x845))+((new_r11*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x847=IKPowWithIntegerCheck(sj14,-1);
if(!x847.valid){
continue;
}
IkReal x846=x847.value;
CheckValue<IkReal> x848=IKPowWithIntegerCheck(new_r00,-1);
if(!x848.valid){
continue;
}
if( IKabs((x846*(x848.value)*((((new_r02*new_r10))+((sj14*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x846)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x846*(x848.value)*((((new_r02*new_r10))+((sj14*sj15))))))+IKsqr((new_r02*x846))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((x846*(x848.value)*((((new_r02*new_r10))+((sj14*sj15))))), (new_r02*x846));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[18];
IkReal x849=IKcos(j13);
IkReal x850=IKsin(j13);
IkReal x851=((1.0)*cj14);
IkReal x852=((1.0)*sj15);
IkReal x853=((1.0)*sj14);
IkReal x854=(cj14*sj15);
IkReal x855=(new_r01*x849);
IkReal x856=(new_r00*x849);
IkReal x857=(cj15*x850);
IkReal x858=(new_r11*x850);
IkReal x859=(sj14*x849);
IkReal x860=((1.0)*x850);
IkReal x861=(new_r10*x850);
IkReal x862=(new_r12*x850);
IkReal x863=(new_r02*x849);
IkReal x864=(cj15*x849);
evalcond[0]=((((-1.0)*x849*x853))+new_r02);
evalcond[1]=((((-1.0)*x850*x853))+new_r12);
evalcond[2]=(((new_r12*x849))+(((-1.0)*new_r02*x860)));
evalcond[3]=(((new_r10*x849))+(((-1.0)*new_r00*x860))+sj15);
evalcond[4]=((((-1.0)*new_r01*x860))+cj15+((new_r11*x849)));
evalcond[5]=(((x850*x854))+new_r11+x864);
evalcond[6]=((((-1.0)*x853))+x863+x862);
evalcond[7]=(x854+x855+x858);
evalcond[8]=((((-1.0)*x857))+new_r01+((x849*x854)));
evalcond[9]=(((sj15*x849))+new_r10+(((-1.0)*x851*x857)));
evalcond[10]=((((-1.0)*cj15*x851))+x856+x861);
evalcond[11]=((((-1.0)*x850*x852))+(((-1.0)*x851*x864))+new_r00);
evalcond[12]=((((-1.0)*new_r20*x851))+((sj14*x856))+((sj14*x861)));
evalcond[13]=((((-1.0)*new_r21*x851))+((sj14*x855))+((sj14*x858)));
evalcond[14]=((-1.0)+((sj14*x862))+(((-1.0)*new_r22*x851))+((new_r02*x859)));
evalcond[15]=((((-1.0)*new_r22*x853))+(((-1.0)*x851*x862))+(((-1.0)*x851*x863)));
evalcond[16]=((((-1.0)*new_r20*x853))+cj15+(((-1.0)*x851*x861))+(((-1.0)*x851*x856)));
evalcond[17]=((((-1.0)*new_r21*x853))+(((-1.0)*x852))+(((-1.0)*x851*x855))+(((-1.0)*x851*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x865=IKPowWithIntegerCheck(IKsign(sj14),-1);
if(!x865.valid){
continue;
}
CheckValue<IkReal> x866 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x866.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x865.value)))+(x866.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[18];
IkReal x867=IKcos(j13);
IkReal x868=IKsin(j13);
IkReal x869=((1.0)*cj14);
IkReal x870=((1.0)*sj15);
IkReal x871=((1.0)*sj14);
IkReal x872=(cj14*sj15);
IkReal x873=(new_r01*x867);
IkReal x874=(new_r00*x867);
IkReal x875=(cj15*x868);
IkReal x876=(new_r11*x868);
IkReal x877=(sj14*x867);
IkReal x878=((1.0)*x868);
IkReal x879=(new_r10*x868);
IkReal x880=(new_r12*x868);
IkReal x881=(new_r02*x867);
IkReal x882=(cj15*x867);
evalcond[0]=((((-1.0)*x867*x871))+new_r02);
evalcond[1]=((((-1.0)*x868*x871))+new_r12);
evalcond[2]=(((new_r12*x867))+(((-1.0)*new_r02*x878)));
evalcond[3]=((((-1.0)*new_r00*x878))+sj15+((new_r10*x867)));
evalcond[4]=((((-1.0)*new_r01*x878))+cj15+((new_r11*x867)));
evalcond[5]=(((x868*x872))+new_r11+x882);
evalcond[6]=(x881+x880+(((-1.0)*x871)));
evalcond[7]=(x872+x873+x876);
evalcond[8]=(((x867*x872))+(((-1.0)*x875))+new_r01);
evalcond[9]=((((-1.0)*x869*x875))+((sj15*x867))+new_r10);
evalcond[10]=((((-1.0)*cj15*x869))+x879+x874);
evalcond[11]=((((-1.0)*x868*x870))+(((-1.0)*x869*x882))+new_r00);
evalcond[12]=(((sj14*x879))+((sj14*x874))+(((-1.0)*new_r20*x869)));
evalcond[13]=((((-1.0)*new_r21*x869))+((sj14*x873))+((sj14*x876)));
evalcond[14]=((-1.0)+(((-1.0)*new_r22*x869))+((new_r02*x877))+((sj14*x880)));
evalcond[15]=((((-1.0)*new_r22*x871))+(((-1.0)*x869*x881))+(((-1.0)*x869*x880)));
evalcond[16]=((((-1.0)*new_r20*x871))+(((-1.0)*x869*x879))+(((-1.0)*x869*x874))+cj15);
evalcond[17]=((((-1.0)*new_r21*x871))+(((-1.0)*x869*x873))+(((-1.0)*x869*x876))+(((-1.0)*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(IKsign(sj14),-1);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x884.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x883.value)))+(x884.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x885=IKcos(j13);
IkReal x886=IKsin(j13);
IkReal x887=((1.0)*sj14);
IkReal x888=((1.0)*cj14);
IkReal x889=((1.0)*x885);
IkReal x890=(new_r12*x886);
IkReal x891=(sj14*x885);
IkReal x892=(sj14*x886);
evalcond[0]=(new_r02+(((-1.0)*x885*x887)));
evalcond[1]=((((-1.0)*x886*x887))+new_r12);
evalcond[2]=(((new_r12*x885))+(((-1.0)*new_r02*x886)));
evalcond[3]=((((-1.0)*x887))+((new_r02*x885))+x890);
evalcond[4]=(((new_r00*x891))+((new_r10*x892))+(((-1.0)*new_r20*x888)));
evalcond[5]=(((new_r11*x892))+((new_r01*x891))+(((-1.0)*new_r21*x888)));
evalcond[6]=((-1.0)+((sj14*x890))+((new_r02*x891))+(((-1.0)*new_r22*x888)));
evalcond[7]=((((-1.0)*x888*x890))+(((-1.0)*new_r02*x885*x888))+(((-1.0)*new_r22*x887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[3];
j15eval[0]=sj14;
j15eval[1]=IKsign(sj14);
j15eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x893=((1.0)*cj13);
if( IKabs(((((-1.0)*new_r01*x893))+(((-1.0)*new_r11*sj13)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x893))+((new_r01*sj13)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x893))+(((-1.0)*new_r11*sj13))))+IKsqr(((((-1.0)*new_r11*x893))+((new_r01*sj13))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*new_r01*x893))+(((-1.0)*new_r11*sj13))), ((((-1.0)*new_r11*x893))+((new_r01*sj13))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x894=IKsin(j15);
IkReal x895=IKcos(j15);
IkReal x896=((1.0)*sj13);
IkReal x897=(cj13*x894);
IkReal x898=((1.0)*x895);
IkReal x899=(x895*x896);
evalcond[0]=(((cj13*new_r01))+x894+((new_r11*sj13)));
evalcond[1]=(((cj13*new_r10))+(((-1.0)*new_r00*x896))+x894);
evalcond[2]=(((cj13*new_r11))+(((-1.0)*new_r01*x896))+x895);
evalcond[3]=(((sj13*x894))+((cj13*x895))+new_r11);
evalcond[4]=(((cj13*new_r00))+(((-1.0)*x898))+((new_r10*sj13)));
evalcond[5]=((((-1.0)*x899))+new_r01+x897);
evalcond[6]=((((-1.0)*x899))+new_r10+x897);
evalcond[7]=((((-1.0)*cj13*x898))+(((-1.0)*x894*x896))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x900=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj13*x900))+((new_r11*sj13)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj13*new_r11))+(((-1.0)*sj13*x900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj13*x900))+((new_r11*sj13))))+IKsqr(((((-1.0)*cj13*new_r11))+(((-1.0)*sj13*x900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj13*x900))+((new_r11*sj13))), ((((-1.0)*cj13*new_r11))+(((-1.0)*sj13*x900))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x901=IKcos(j15);
IkReal x902=IKsin(j15);
IkReal x903=((1.0)*sj13);
IkReal x904=(cj13*x901);
IkReal x905=((1.0)*x902);
IkReal x906=(x902*x903);
evalcond[0]=(((cj13*new_r00))+((new_r10*sj13))+x901);
evalcond[1]=(((cj13*new_r10))+(((-1.0)*new_r00*x903))+x902);
evalcond[2]=(((cj13*new_r11))+(((-1.0)*new_r01*x903))+x901);
evalcond[3]=(((cj13*new_r01))+(((-1.0)*x905))+((new_r11*sj13)));
evalcond[4]=(((cj13*x902))+((sj13*x901))+new_r10);
evalcond[5]=((((-1.0)*x906))+new_r11+x904);
evalcond[6]=((((-1.0)*x906))+new_r00+x904);
evalcond[7]=((((-1.0)*cj13*x905))+(((-1.0)*x901*x903))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x907=IKsin(j15);
IkReal x908=IKcos(j15);
IkReal x909=((1.0)*sj14);
IkReal x910=((1.0)*cj14);
evalcond[0]=(new_r10+x907);
evalcond[1]=(new_r11+x908);
evalcond[2]=(((sj14*x907))+new_r21);
evalcond[3]=(((cj14*x907))+new_r01);
evalcond[4]=((((-1.0)*x908*x909))+new_r20);
evalcond[5]=((((-1.0)*x908*x910))+new_r00);
evalcond[6]=((((-1.0)*new_r20*x909))+(((-1.0)*new_r00*x910))+x908);
evalcond[7]=((((-1.0)*new_r21*x909))+(((-1.0)*x907))+(((-1.0)*new_r01*x910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r10, new_r11);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x911=IKsin(j15);
IkReal x912=IKcos(j15);
IkReal x913=((1.0)*sj14);
evalcond[0]=(((sj14*x911))+new_r21);
evalcond[1]=((((-1.0)*new_r10))+x911);
evalcond[2]=((((-1.0)*new_r11))+x912);
evalcond[3]=((((-1.0)*x912*x913))+new_r20);
evalcond[4]=(((cj14*x911))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj14*x912)));
evalcond[6]=(((cj14*new_r00))+(((-1.0)*new_r20*x913))+x912);
evalcond[7]=((((-1.0)*new_r21*x913))+((cj14*new_r01))+(((-1.0)*x911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r00, new_r01);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x914=IKsin(j15);
IkReal x915=IKcos(j15);
IkReal x916=((1.0)*sj14);
IkReal x917=((1.0)*cj14);
evalcond[0]=(((sj14*x914))+new_r21);
evalcond[1]=((((-1.0)*new_r00))+x914);
evalcond[2]=((((-1.0)*new_r01))+x915);
evalcond[3]=(((cj14*x914))+new_r11);
evalcond[4]=(new_r20+(((-1.0)*x915*x916)));
evalcond[5]=(new_r10+(((-1.0)*x915*x917)));
evalcond[6]=((((-1.0)*new_r20*x916))+x915+(((-1.0)*new_r10*x917)));
evalcond[7]=((((-1.0)*new_r21*x916))+(((-1.0)*x914))+(((-1.0)*new_r11*x917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x918=IKsin(j15);
IkReal x919=IKcos(j15);
IkReal x920=((1.0)*sj14);
evalcond[0]=(new_r00+x918);
evalcond[1]=(new_r01+x919);
evalcond[2]=(((sj14*x918))+new_r21);
evalcond[3]=((((-1.0)*x919*x920))+new_r20);
evalcond[4]=(((cj14*x918))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*cj14*x919)));
evalcond[6]=(((cj14*new_r10))+x919+(((-1.0)*new_r20*x920)));
evalcond[7]=((((-1.0)*new_r21*x920))+((cj14*new_r11))+(((-1.0)*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j15eval[0]=1.0;
if( IKabs(j15eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j15]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j15array[2], cj15array[2], sj15array[2], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[2]={true,true};
_nj15 = 2;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(sj14,-1);
if(!x922.valid){
continue;
}
IkReal x921=x922.value;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(sj13,-1);
if(!x923.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x921)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x921*(x923.value)*(((((-1.0)*cj13*cj14*new_r21))+((new_r01*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x921))+IKsqr((x921*(x923.value)*(((((-1.0)*cj13*cj14*new_r21))+((new_r01*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r21*x921), (x921*(x923.value)*(((((-1.0)*cj13*cj14*new_r21))+((new_r01*sj14))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[12];
IkReal x924=IKsin(j15);
IkReal x925=IKcos(j15);
IkReal x926=((1.0)*sj13);
IkReal x927=((1.0)*sj14);
IkReal x928=(cj14*x925);
IkReal x929=(cj14*x924);
IkReal x930=((1.0)*cj13*cj14);
evalcond[0]=(new_r21+((sj14*x924)));
evalcond[1]=((((-1.0)*x925*x927))+new_r20);
evalcond[2]=(((cj13*new_r10))+(((-1.0)*new_r00*x926))+x924);
evalcond[3]=(((cj13*new_r11))+(((-1.0)*new_r01*x926))+x925);
evalcond[4]=(((cj13*new_r01))+((new_r11*sj13))+x929);
evalcond[5]=(((sj13*x929))+((cj13*x925))+new_r11);
evalcond[6]=(((cj13*new_r00))+(((-1.0)*x928))+((new_r10*sj13)));
evalcond[7]=((((-1.0)*x925*x926))+((cj13*x929))+new_r01);
evalcond[8]=((((-1.0)*x926*x928))+((cj13*x924))+new_r10);
evalcond[9]=((((-1.0)*x924*x926))+(((-1.0)*cj13*x928))+new_r00);
evalcond[10]=((((-1.0)*new_r00*x930))+(((-1.0)*cj14*new_r10*x926))+x925+(((-1.0)*new_r20*x927)));
evalcond[11]=((((-1.0)*new_r21*x927))+(((-1.0)*x924))+(((-1.0)*new_r01*x930))+(((-1.0)*cj14*new_r11*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x932=IKPowWithIntegerCheck(sj14,-1);
if(!x932.valid){
continue;
}
IkReal x931=x932.value;
CheckValue<IkReal> x933=IKPowWithIntegerCheck(cj13,-1);
if(!x933.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x931)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x931*(x933.value)*((((cj14*new_r21*sj13))+(((-1.0)*new_r11*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x931))+IKsqr((x931*(x933.value)*((((cj14*new_r21*sj13))+(((-1.0)*new_r11*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r21*x931), (x931*(x933.value)*((((cj14*new_r21*sj13))+(((-1.0)*new_r11*sj14))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[12];
IkReal x934=IKsin(j15);
IkReal x935=IKcos(j15);
IkReal x936=((1.0)*sj13);
IkReal x937=((1.0)*sj14);
IkReal x938=(cj14*x935);
IkReal x939=(cj14*x934);
IkReal x940=((1.0)*cj13*cj14);
evalcond[0]=(new_r21+((sj14*x934)));
evalcond[1]=((((-1.0)*x935*x937))+new_r20);
evalcond[2]=(((cj13*new_r10))+(((-1.0)*new_r00*x936))+x934);
evalcond[3]=(((cj13*new_r11))+(((-1.0)*new_r01*x936))+x935);
evalcond[4]=(((cj13*new_r01))+((new_r11*sj13))+x939);
evalcond[5]=(((sj13*x939))+((cj13*x935))+new_r11);
evalcond[6]=(((cj13*new_r00))+(((-1.0)*x938))+((new_r10*sj13)));
evalcond[7]=((((-1.0)*x935*x936))+((cj13*x939))+new_r01);
evalcond[8]=((((-1.0)*x936*x938))+((cj13*x934))+new_r10);
evalcond[9]=((((-1.0)*x934*x936))+(((-1.0)*cj13*x938))+new_r00);
evalcond[10]=((((-1.0)*cj14*new_r10*x936))+(((-1.0)*new_r00*x940))+x935+(((-1.0)*new_r20*x937)));
evalcond[11]=((((-1.0)*new_r21*x937))+(((-1.0)*x934))+(((-1.0)*new_r01*x940))+(((-1.0)*cj14*new_r11*x936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign(sj14),-1);
if(!x942.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x941.value)+(((1.5707963267949)*(x942.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[12];
IkReal x943=IKsin(j15);
IkReal x944=IKcos(j15);
IkReal x945=((1.0)*sj13);
IkReal x946=((1.0)*sj14);
IkReal x947=(cj14*x944);
IkReal x948=(cj14*x943);
IkReal x949=((1.0)*cj13*cj14);
evalcond[0]=(((sj14*x943))+new_r21);
evalcond[1]=((((-1.0)*x944*x946))+new_r20);
evalcond[2]=(((cj13*new_r10))+(((-1.0)*new_r00*x945))+x943);
evalcond[3]=(((cj13*new_r11))+(((-1.0)*new_r01*x945))+x944);
evalcond[4]=(((cj13*new_r01))+((new_r11*sj13))+x948);
evalcond[5]=(((sj13*x948))+((cj13*x944))+new_r11);
evalcond[6]=(((cj13*new_r00))+(((-1.0)*x947))+((new_r10*sj13)));
evalcond[7]=((((-1.0)*x944*x945))+((cj13*x948))+new_r01);
evalcond[8]=((((-1.0)*x945*x947))+((cj13*x943))+new_r10);
evalcond[9]=((((-1.0)*cj13*x947))+(((-1.0)*x943*x945))+new_r00);
evalcond[10]=((((-1.0)*new_r20*x946))+(((-1.0)*cj14*new_r10*x945))+(((-1.0)*new_r00*x949))+x944);
evalcond[11]=((((-1.0)*new_r21*x946))+(((-1.0)*x943))+(((-1.0)*new_r01*x949))+(((-1.0)*cj14*new_r11*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - vector (99b7da08a91f04df7457569089b14062)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
